
lora_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000423c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080043dc  080043dc  000143dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004440  08004440  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004440  08004440  00014440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004448  08004448  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004448  08004448  00014448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800444c  0800444c  0001444c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004450  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000070  080044c0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001e4  080044c0  000201e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000abe9  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001893  00000000  00000000  0002ac89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000938  00000000  00000000  0002c520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008a0  00000000  00000000  0002ce58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001948  00000000  00000000  0002d6f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ad52  00000000  00000000  0002f040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000904bd  00000000  00000000  00039d92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ca24f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b4c  00000000  00000000  000ca2a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080043c4 	.word	0x080043c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080043c4 	.word	0x080043c4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2iz>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d215      	bcs.n	8000a62 <__aeabi_d2iz+0x36>
 8000a36:	d511      	bpl.n	8000a5c <__aeabi_d2iz+0x30>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d912      	bls.n	8000a68 <__aeabi_d2iz+0x3c>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a52:	fa23 f002 	lsr.w	r0, r3, r2
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a66:	d105      	bne.n	8000a74 <__aeabi_d2iz+0x48>
 8000a68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	bf08      	it	eq
 8000a6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b974 	b.w	8000d7c <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	4604      	mov	r4, r0
 8000ab4:	468e      	mov	lr, r1
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d14d      	bne.n	8000b56 <__udivmoddi4+0xaa>
 8000aba:	428a      	cmp	r2, r1
 8000abc:	4694      	mov	ip, r2
 8000abe:	d969      	bls.n	8000b94 <__udivmoddi4+0xe8>
 8000ac0:	fab2 f282 	clz	r2, r2
 8000ac4:	b152      	cbz	r2, 8000adc <__udivmoddi4+0x30>
 8000ac6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aca:	f1c2 0120 	rsb	r1, r2, #32
 8000ace:	fa20 f101 	lsr.w	r1, r0, r1
 8000ad2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ad6:	ea41 0e03 	orr.w	lr, r1, r3
 8000ada:	4094      	lsls	r4, r2
 8000adc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ae0:	0c21      	lsrs	r1, r4, #16
 8000ae2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ae6:	fa1f f78c 	uxth.w	r7, ip
 8000aea:	fb08 e316 	mls	r3, r8, r6, lr
 8000aee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000af2:	fb06 f107 	mul.w	r1, r6, r7
 8000af6:	4299      	cmp	r1, r3
 8000af8:	d90a      	bls.n	8000b10 <__udivmoddi4+0x64>
 8000afa:	eb1c 0303 	adds.w	r3, ip, r3
 8000afe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b02:	f080 811f 	bcs.w	8000d44 <__udivmoddi4+0x298>
 8000b06:	4299      	cmp	r1, r3
 8000b08:	f240 811c 	bls.w	8000d44 <__udivmoddi4+0x298>
 8000b0c:	3e02      	subs	r6, #2
 8000b0e:	4463      	add	r3, ip
 8000b10:	1a5b      	subs	r3, r3, r1
 8000b12:	b2a4      	uxth	r4, r4
 8000b14:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b18:	fb08 3310 	mls	r3, r8, r0, r3
 8000b1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b20:	fb00 f707 	mul.w	r7, r0, r7
 8000b24:	42a7      	cmp	r7, r4
 8000b26:	d90a      	bls.n	8000b3e <__udivmoddi4+0x92>
 8000b28:	eb1c 0404 	adds.w	r4, ip, r4
 8000b2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b30:	f080 810a 	bcs.w	8000d48 <__udivmoddi4+0x29c>
 8000b34:	42a7      	cmp	r7, r4
 8000b36:	f240 8107 	bls.w	8000d48 <__udivmoddi4+0x29c>
 8000b3a:	4464      	add	r4, ip
 8000b3c:	3802      	subs	r0, #2
 8000b3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b42:	1be4      	subs	r4, r4, r7
 8000b44:	2600      	movs	r6, #0
 8000b46:	b11d      	cbz	r5, 8000b50 <__udivmoddi4+0xa4>
 8000b48:	40d4      	lsrs	r4, r2
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b50:	4631      	mov	r1, r6
 8000b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d909      	bls.n	8000b6e <__udivmoddi4+0xc2>
 8000b5a:	2d00      	cmp	r5, #0
 8000b5c:	f000 80ef 	beq.w	8000d3e <__udivmoddi4+0x292>
 8000b60:	2600      	movs	r6, #0
 8000b62:	e9c5 0100 	strd	r0, r1, [r5]
 8000b66:	4630      	mov	r0, r6
 8000b68:	4631      	mov	r1, r6
 8000b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6e:	fab3 f683 	clz	r6, r3
 8000b72:	2e00      	cmp	r6, #0
 8000b74:	d14a      	bne.n	8000c0c <__udivmoddi4+0x160>
 8000b76:	428b      	cmp	r3, r1
 8000b78:	d302      	bcc.n	8000b80 <__udivmoddi4+0xd4>
 8000b7a:	4282      	cmp	r2, r0
 8000b7c:	f200 80f9 	bhi.w	8000d72 <__udivmoddi4+0x2c6>
 8000b80:	1a84      	subs	r4, r0, r2
 8000b82:	eb61 0303 	sbc.w	r3, r1, r3
 8000b86:	2001      	movs	r0, #1
 8000b88:	469e      	mov	lr, r3
 8000b8a:	2d00      	cmp	r5, #0
 8000b8c:	d0e0      	beq.n	8000b50 <__udivmoddi4+0xa4>
 8000b8e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b92:	e7dd      	b.n	8000b50 <__udivmoddi4+0xa4>
 8000b94:	b902      	cbnz	r2, 8000b98 <__udivmoddi4+0xec>
 8000b96:	deff      	udf	#255	; 0xff
 8000b98:	fab2 f282 	clz	r2, r2
 8000b9c:	2a00      	cmp	r2, #0
 8000b9e:	f040 8092 	bne.w	8000cc6 <__udivmoddi4+0x21a>
 8000ba2:	eba1 010c 	sub.w	r1, r1, ip
 8000ba6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000baa:	fa1f fe8c 	uxth.w	lr, ip
 8000bae:	2601      	movs	r6, #1
 8000bb0:	0c20      	lsrs	r0, r4, #16
 8000bb2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bb6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bbe:	fb0e f003 	mul.w	r0, lr, r3
 8000bc2:	4288      	cmp	r0, r1
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0x12c>
 8000bc6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bca:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x12a>
 8000bd0:	4288      	cmp	r0, r1
 8000bd2:	f200 80cb 	bhi.w	8000d6c <__udivmoddi4+0x2c0>
 8000bd6:	4643      	mov	r3, r8
 8000bd8:	1a09      	subs	r1, r1, r0
 8000bda:	b2a4      	uxth	r4, r4
 8000bdc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000be0:	fb07 1110 	mls	r1, r7, r0, r1
 8000be4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000be8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bec:	45a6      	cmp	lr, r4
 8000bee:	d908      	bls.n	8000c02 <__udivmoddi4+0x156>
 8000bf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bf8:	d202      	bcs.n	8000c00 <__udivmoddi4+0x154>
 8000bfa:	45a6      	cmp	lr, r4
 8000bfc:	f200 80bb 	bhi.w	8000d76 <__udivmoddi4+0x2ca>
 8000c00:	4608      	mov	r0, r1
 8000c02:	eba4 040e 	sub.w	r4, r4, lr
 8000c06:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c0a:	e79c      	b.n	8000b46 <__udivmoddi4+0x9a>
 8000c0c:	f1c6 0720 	rsb	r7, r6, #32
 8000c10:	40b3      	lsls	r3, r6
 8000c12:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c16:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c1a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c1e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c22:	431c      	orrs	r4, r3
 8000c24:	40f9      	lsrs	r1, r7
 8000c26:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c2a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c2e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c32:	0c20      	lsrs	r0, r4, #16
 8000c34:	fa1f fe8c 	uxth.w	lr, ip
 8000c38:	fb09 1118 	mls	r1, r9, r8, r1
 8000c3c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c40:	fb08 f00e 	mul.w	r0, r8, lr
 8000c44:	4288      	cmp	r0, r1
 8000c46:	fa02 f206 	lsl.w	r2, r2, r6
 8000c4a:	d90b      	bls.n	8000c64 <__udivmoddi4+0x1b8>
 8000c4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c50:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c54:	f080 8088 	bcs.w	8000d68 <__udivmoddi4+0x2bc>
 8000c58:	4288      	cmp	r0, r1
 8000c5a:	f240 8085 	bls.w	8000d68 <__udivmoddi4+0x2bc>
 8000c5e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c62:	4461      	add	r1, ip
 8000c64:	1a09      	subs	r1, r1, r0
 8000c66:	b2a4      	uxth	r4, r4
 8000c68:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c6c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c70:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c78:	458e      	cmp	lr, r1
 8000c7a:	d908      	bls.n	8000c8e <__udivmoddi4+0x1e2>
 8000c7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c80:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c84:	d26c      	bcs.n	8000d60 <__udivmoddi4+0x2b4>
 8000c86:	458e      	cmp	lr, r1
 8000c88:	d96a      	bls.n	8000d60 <__udivmoddi4+0x2b4>
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	4461      	add	r1, ip
 8000c8e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c92:	fba0 9402 	umull	r9, r4, r0, r2
 8000c96:	eba1 010e 	sub.w	r1, r1, lr
 8000c9a:	42a1      	cmp	r1, r4
 8000c9c:	46c8      	mov	r8, r9
 8000c9e:	46a6      	mov	lr, r4
 8000ca0:	d356      	bcc.n	8000d50 <__udivmoddi4+0x2a4>
 8000ca2:	d053      	beq.n	8000d4c <__udivmoddi4+0x2a0>
 8000ca4:	b15d      	cbz	r5, 8000cbe <__udivmoddi4+0x212>
 8000ca6:	ebb3 0208 	subs.w	r2, r3, r8
 8000caa:	eb61 010e 	sbc.w	r1, r1, lr
 8000cae:	fa01 f707 	lsl.w	r7, r1, r7
 8000cb2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cb6:	40f1      	lsrs	r1, r6
 8000cb8:	431f      	orrs	r7, r3
 8000cba:	e9c5 7100 	strd	r7, r1, [r5]
 8000cbe:	2600      	movs	r6, #0
 8000cc0:	4631      	mov	r1, r6
 8000cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc6:	f1c2 0320 	rsb	r3, r2, #32
 8000cca:	40d8      	lsrs	r0, r3
 8000ccc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cd4:	4091      	lsls	r1, r2
 8000cd6:	4301      	orrs	r1, r0
 8000cd8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cdc:	fa1f fe8c 	uxth.w	lr, ip
 8000ce0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ce4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ce8:	0c0b      	lsrs	r3, r1, #16
 8000cea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cee:	fb00 f60e 	mul.w	r6, r0, lr
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x260>
 8000cfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d02:	d22f      	bcs.n	8000d64 <__udivmoddi4+0x2b8>
 8000d04:	429e      	cmp	r6, r3
 8000d06:	d92d      	bls.n	8000d64 <__udivmoddi4+0x2b8>
 8000d08:	3802      	subs	r0, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	b289      	uxth	r1, r1
 8000d10:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d14:	fb07 3316 	mls	r3, r7, r6, r3
 8000d18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d1c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d20:	428b      	cmp	r3, r1
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x28a>
 8000d24:	eb1c 0101 	adds.w	r1, ip, r1
 8000d28:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d2c:	d216      	bcs.n	8000d5c <__udivmoddi4+0x2b0>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d914      	bls.n	8000d5c <__udivmoddi4+0x2b0>
 8000d32:	3e02      	subs	r6, #2
 8000d34:	4461      	add	r1, ip
 8000d36:	1ac9      	subs	r1, r1, r3
 8000d38:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d3c:	e738      	b.n	8000bb0 <__udivmoddi4+0x104>
 8000d3e:	462e      	mov	r6, r5
 8000d40:	4628      	mov	r0, r5
 8000d42:	e705      	b.n	8000b50 <__udivmoddi4+0xa4>
 8000d44:	4606      	mov	r6, r0
 8000d46:	e6e3      	b.n	8000b10 <__udivmoddi4+0x64>
 8000d48:	4618      	mov	r0, r3
 8000d4a:	e6f8      	b.n	8000b3e <__udivmoddi4+0x92>
 8000d4c:	454b      	cmp	r3, r9
 8000d4e:	d2a9      	bcs.n	8000ca4 <__udivmoddi4+0x1f8>
 8000d50:	ebb9 0802 	subs.w	r8, r9, r2
 8000d54:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d58:	3801      	subs	r0, #1
 8000d5a:	e7a3      	b.n	8000ca4 <__udivmoddi4+0x1f8>
 8000d5c:	4646      	mov	r6, r8
 8000d5e:	e7ea      	b.n	8000d36 <__udivmoddi4+0x28a>
 8000d60:	4620      	mov	r0, r4
 8000d62:	e794      	b.n	8000c8e <__udivmoddi4+0x1e2>
 8000d64:	4640      	mov	r0, r8
 8000d66:	e7d1      	b.n	8000d0c <__udivmoddi4+0x260>
 8000d68:	46d0      	mov	r8, sl
 8000d6a:	e77b      	b.n	8000c64 <__udivmoddi4+0x1b8>
 8000d6c:	3b02      	subs	r3, #2
 8000d6e:	4461      	add	r1, ip
 8000d70:	e732      	b.n	8000bd8 <__udivmoddi4+0x12c>
 8000d72:	4630      	mov	r0, r6
 8000d74:	e709      	b.n	8000b8a <__udivmoddi4+0xde>
 8000d76:	4464      	add	r4, ip
 8000d78:	3802      	subs	r0, #2
 8000d7a:	e742      	b.n	8000c02 <__udivmoddi4+0x156>

08000d7c <__aeabi_idiv0>:
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop

08000d80 <low_pass_filter>:
int compare(const void *a, const void *b); // Fonction pour qsort
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float low_pass_filter(float input, float prev, float alpha) {
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	ed87 0a03 	vstr	s0, [r7, #12]
 8000d8a:	edc7 0a02 	vstr	s1, [r7, #8]
 8000d8e:	ed87 1a01 	vstr	s2, [r7, #4]
    return alpha * input + (1 - alpha) * prev;
 8000d92:	ed97 7a01 	vldr	s14, [r7, #4]
 8000d96:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000da2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000da6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000daa:	edd7 7a02 	vldr	s15, [r7, #8]
 8000dae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000db2:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000db6:	eeb0 0a67 	vmov.f32	s0, s15
 8000dba:	3714      	adds	r7, #20
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <high_pass_filter>:

float high_pass_filter(float input, float prev, float alpha) {
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	ed87 0a03 	vstr	s0, [r7, #12]
 8000dce:	edc7 0a02 	vstr	s1, [r7, #8]
 8000dd2:	ed87 1a01 	vstr	s2, [r7, #4]
    return alpha * (input - prev) + (1 - alpha) * prev;
 8000dd6:	ed97 7a03 	vldr	s14, [r7, #12]
 8000dda:	edd7 7a02 	vldr	s15, [r7, #8]
 8000dde:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000de2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000de6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000dea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000dee:	edd7 7a01 	vldr	s15, [r7, #4]
 8000df2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000df6:	edd7 7a02 	vldr	s15, [r7, #8]
 8000dfa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000dfe:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000e02:	eeb0 0a67 	vmov.f32	s0, s15
 8000e06:	3714      	adds	r7, #20
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <band_pass_filter>:

/**
 * @brief Combine un filtre passe-bas et passe-haut pour créer un filtre passe-bande.
 */
float band_pass_filter(float input, float lowAlpha, float highAlpha) {
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	ed87 0a03 	vstr	s0, [r7, #12]
 8000e1a:	edc7 0a02 	vstr	s1, [r7, #8]
 8000e1e:	ed87 1a01 	vstr	s2, [r7, #4]
    float lowFiltered = low_pass_filter(input, lowPassPrev, lowAlpha);
 8000e22:	4b14      	ldr	r3, [pc, #80]	; (8000e74 <band_pass_filter+0x64>)
 8000e24:	edd3 7a00 	vldr	s15, [r3]
 8000e28:	ed97 1a02 	vldr	s2, [r7, #8]
 8000e2c:	eef0 0a67 	vmov.f32	s1, s15
 8000e30:	ed97 0a03 	vldr	s0, [r7, #12]
 8000e34:	f7ff ffa4 	bl	8000d80 <low_pass_filter>
 8000e38:	ed87 0a05 	vstr	s0, [r7, #20]
    lowPassPrev = lowFiltered; // Met à jour la valeur précédente pour le passe-bas
 8000e3c:	4a0d      	ldr	r2, [pc, #52]	; (8000e74 <band_pass_filter+0x64>)
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	6013      	str	r3, [r2, #0]
    float highFiltered = high_pass_filter(lowFiltered, highPassPrev, highAlpha);
 8000e42:	4b0d      	ldr	r3, [pc, #52]	; (8000e78 <band_pass_filter+0x68>)
 8000e44:	edd3 7a00 	vldr	s15, [r3]
 8000e48:	ed97 1a01 	vldr	s2, [r7, #4]
 8000e4c:	eef0 0a67 	vmov.f32	s1, s15
 8000e50:	ed97 0a05 	vldr	s0, [r7, #20]
 8000e54:	f7ff ffb6 	bl	8000dc4 <high_pass_filter>
 8000e58:	ed87 0a04 	vstr	s0, [r7, #16]
    highPassPrev = highFiltered; // Met à jour la valeur précédente pour le passe-haut
 8000e5c:	4a06      	ldr	r2, [pc, #24]	; (8000e78 <band_pass_filter+0x68>)
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	6013      	str	r3, [r2, #0]
    return highFiltered;
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	ee07 3a90 	vmov	s15, r3
}
 8000e68:	eeb0 0a67 	vmov.f32	s0, s15
 8000e6c:	3718      	adds	r7, #24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20000178 	.word	0x20000178
 8000e78:	2000017c 	.word	0x2000017c

08000e7c <median_filter>:

/**
 * @brief Applique un filtre médian pour réduire les artéfacts brusques.
 */
float median_filter(float *window, int size) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b088      	sub	sp, #32
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]
    float sorted[WINDOW_SIZE];
    memcpy(sorted, window, sizeof(float) * size); // Copie de la fenêtre
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	009a      	lsls	r2, r3, #2
 8000e8a:	f107 030c 	add.w	r3, r7, #12
 8000e8e:	6879      	ldr	r1, [r7, #4]
 8000e90:	4618      	mov	r0, r3
 8000e92:	f002 fc85 	bl	80037a0 <memcpy>
    qsort(sorted, size, sizeof(float), compare);  // Trie la fenêtre
 8000e96:	f107 000c 	add.w	r0, r7, #12
 8000e9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ec4 <median_filter+0x48>)
 8000e9c:	2204      	movs	r2, #4
 8000e9e:	6839      	ldr	r1, [r7, #0]
 8000ea0:	f002 fccc 	bl	800383c <qsort>
    return sorted[size / 2];                      // Retourne la médiane
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	0fda      	lsrs	r2, r3, #31
 8000ea8:	4413      	add	r3, r2
 8000eaa:	105b      	asrs	r3, r3, #1
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	3320      	adds	r3, #32
 8000eb0:	443b      	add	r3, r7
 8000eb2:	3b14      	subs	r3, #20
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	ee07 3a90 	vmov	s15, r3
}
 8000eba:	eeb0 0a67 	vmov.f32	s0, s15
 8000ebe:	3720      	adds	r7, #32
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	08000ec9 	.word	0x08000ec9

08000ec8 <compare>:

/**
 * @brief Fonction de comparaison pour qsort (tri croissant).
 */
int compare(const void *a, const void *b) {
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]
    return (*(float *)a > *(float *)b) - (*(float *)a < *(float *)b);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	ed93 7a00 	vldr	s14, [r3]
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	edd3 7a00 	vldr	s15, [r3]
 8000ede:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ee6:	bfcc      	ite	gt
 8000ee8:	2301      	movgt	r3, #1
 8000eea:	2300      	movle	r3, #0
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	461a      	mov	r2, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	ed93 7a00 	vldr	s14, [r3]
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	edd3 7a00 	vldr	s15, [r3]
 8000efc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f04:	bf4c      	ite	mi
 8000f06:	2301      	movmi	r3, #1
 8000f08:	2300      	movpl	r3, #0
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	1ad3      	subs	r3, r2, r3
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	0000      	movs	r0, r0
 8000f1c:	0000      	movs	r0, r0
	...

08000f20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	float lowAlpha = 0.05;  // Coefficient pour le passe-bas
 8000f26:	4b50      	ldr	r3, [pc, #320]	; (8001068 <main+0x148>)
 8000f28:	617b      	str	r3, [r7, #20]
	float highAlpha = 0.9;  // Coefficient pour le passe-haut
 8000f2a:	4b50      	ldr	r3, [pc, #320]	; (800106c <main+0x14c>)
 8000f2c:	613b      	str	r3, [r7, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f2e:	f000 fc2f 	bl	8001790 <HAL_Init>

  /* USER CODE BEGIN Init */
  for (int i = 0; i < WINDOW_SIZE; i++) {
 8000f32:	2300      	movs	r3, #0
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	2b04      	cmp	r3, #4
 8000f3a:	f300 8087 	bgt.w	800104c <main+0x12c>
         medianWindow[i] = 0.0; // Initialisation de la fenêtre glissante
 8000f3e:	4a4c      	ldr	r2, [pc, #304]	; (8001070 <main+0x150>)
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	4413      	add	r3, r2
 8000f46:	f04f 0200 	mov.w	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f4c:	f000 f8a2 	bl	8001094 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f50:	f000 f9bc 	bl	80012cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f54:	f000 f990 	bl	8001278 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000f58:	f000 f906 	bl	8001168 <MX_ADC1_Init>
  MX_SPI2_Init();
 8000f5c:	f000 f956 	bl	800120c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  float voltage = 0.0;  // Valeur calculée en tension
 8000f60:	f04f 0300 	mov.w	r3, #0
 8000f64:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Démarrer une conversion ADC
	          HAL_ADC_Start(&hadc1);
 8000f66:	4843      	ldr	r0, [pc, #268]	; (8001074 <main+0x154>)
 8000f68:	f000 fcec 	bl	8001944 <HAL_ADC_Start>
	          if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 8000f6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f70:	4840      	ldr	r0, [pc, #256]	; (8001074 <main+0x154>)
 8000f72:	f000 fdce 	bl	8001b12 <HAL_ADC_PollForConversion>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d105      	bne.n	8000f88 <main+0x68>
	              adcValue = HAL_ADC_GetValue(&hadc1);
 8000f7c:	483d      	ldr	r0, [pc, #244]	; (8001074 <main+0x154>)
 8000f7e:	f000 fe53 	bl	8001c28 <HAL_ADC_GetValue>
 8000f82:	4603      	mov	r3, r0
 8000f84:	4a3c      	ldr	r2, [pc, #240]	; (8001078 <main+0x158>)
 8000f86:	6013      	str	r3, [r2, #0]
	          }
	          HAL_ADC_Stop(&hadc1);
 8000f88:	483a      	ldr	r0, [pc, #232]	; (8001074 <main+0x154>)
 8000f8a:	f000 fd8f 	bl	8001aac <HAL_ADC_Stop>

	          // Appliquer le filtre passe-bande
	          float bandFiltered = band_pass_filter(adcValue, lowAlpha, highAlpha);
 8000f8e:	4b3a      	ldr	r3, [pc, #232]	; (8001078 <main+0x158>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	ee07 3a90 	vmov	s15, r3
 8000f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f9a:	ed97 1a04 	vldr	s2, [r7, #16]
 8000f9e:	edd7 0a05 	vldr	s1, [r7, #20]
 8000fa2:	eeb0 0a67 	vmov.f32	s0, s15
 8000fa6:	f7ff ff33 	bl	8000e10 <band_pass_filter>
 8000faa:	ed87 0a01 	vstr	s0, [r7, #4]

	          // Ajouter à la fenêtre glissante du filtre médian
	          medianWindow[windowIndex] = bandFiltered;
 8000fae:	4b33      	ldr	r3, [pc, #204]	; (800107c <main+0x15c>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a2f      	ldr	r2, [pc, #188]	; (8001070 <main+0x150>)
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	4413      	add	r3, r2
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	601a      	str	r2, [r3, #0]
	          windowIndex = (windowIndex + 1) % WINDOW_SIZE; // Mise à jour de l'index circulaire
 8000fbc:	4b2f      	ldr	r3, [pc, #188]	; (800107c <main+0x15c>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	1c59      	adds	r1, r3, #1
 8000fc2:	4b2f      	ldr	r3, [pc, #188]	; (8001080 <main+0x160>)
 8000fc4:	fb83 2301 	smull	r2, r3, r3, r1
 8000fc8:	105a      	asrs	r2, r3, #1
 8000fca:	17cb      	asrs	r3, r1, #31
 8000fcc:	1ad2      	subs	r2, r2, r3
 8000fce:	4613      	mov	r3, r2
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	4413      	add	r3, r2
 8000fd4:	1aca      	subs	r2, r1, r3
 8000fd6:	4b29      	ldr	r3, [pc, #164]	; (800107c <main+0x15c>)
 8000fd8:	601a      	str	r2, [r3, #0]

	          // Appliquer le filtre médian
	          filteredValue = median_filter(medianWindow, WINDOW_SIZE);
 8000fda:	2105      	movs	r1, #5
 8000fdc:	4824      	ldr	r0, [pc, #144]	; (8001070 <main+0x150>)
 8000fde:	f7ff ff4d 	bl	8000e7c <median_filter>
 8000fe2:	eef0 7a40 	vmov.f32	s15, s0
 8000fe6:	4b27      	ldr	r3, [pc, #156]	; (8001084 <main+0x164>)
 8000fe8:	edc3 7a00 	vstr	s15, [r3]

	          // Conversion en millivolts
	          int voltage_mv = (int)((filteredValue / ADC_RESOLUTION) * V_REF);
 8000fec:	4b25      	ldr	r3, [pc, #148]	; (8001084 <main+0x164>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff fab1 	bl	8000558 <__aeabi_f2d>
 8000ff6:	a318      	add	r3, pc, #96	; (adr r3, 8001058 <main+0x138>)
 8000ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ffc:	f7ff fc2e 	bl	800085c <__aeabi_ddiv>
 8001000:	4602      	mov	r2, r0
 8001002:	460b      	mov	r3, r1
 8001004:	4610      	mov	r0, r2
 8001006:	4619      	mov	r1, r3
 8001008:	a315      	add	r3, pc, #84	; (adr r3, 8001060 <main+0x140>)
 800100a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100e:	f7ff fafb 	bl	8000608 <__aeabi_dmul>
 8001012:	4602      	mov	r2, r0
 8001014:	460b      	mov	r3, r1
 8001016:	4610      	mov	r0, r2
 8001018:	4619      	mov	r1, r3
 800101a:	f7ff fd07 	bl	8000a2c <__aeabi_d2iz>
 800101e:	4603      	mov	r3, r0
 8001020:	603b      	str	r3, [r7, #0]

	          // Préparer et envoyer les données via UART
	          snprintf(msg, sizeof(msg), "Filtered ECG: %d mV\r\n", voltage_mv);
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	4a18      	ldr	r2, [pc, #96]	; (8001088 <main+0x168>)
 8001026:	2132      	movs	r1, #50	; 0x32
 8001028:	4818      	ldr	r0, [pc, #96]	; (800108c <main+0x16c>)
 800102a:	f002 fd57 	bl	8003adc <sniprintf>
	          HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 800102e:	4817      	ldr	r0, [pc, #92]	; (800108c <main+0x16c>)
 8001030:	f7ff f8d6 	bl	80001e0 <strlen>
 8001034:	4603      	mov	r3, r0
 8001036:	b29a      	uxth	r2, r3
 8001038:	f04f 33ff 	mov.w	r3, #4294967295
 800103c:	4913      	ldr	r1, [pc, #76]	; (800108c <main+0x16c>)
 800103e:	4814      	ldr	r0, [pc, #80]	; (8001090 <main+0x170>)
 8001040:	f002 f810 	bl	8003064 <HAL_UART_Transmit>

	          // Attente pour correspondre à la fréquence d'échantillonnage
	          HAL_Delay(1000 / SAMPLE_RATE);
 8001044:	2001      	movs	r0, #1
 8001046:	f000 fc15 	bl	8001874 <HAL_Delay>
  {
 800104a:	e78c      	b.n	8000f66 <main+0x46>
 800104c:	2300      	movs	r3, #0
	      }}
  }
 800104e:	4618      	mov	r0, r3
 8001050:	3718      	adds	r7, #24
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	00000000 	.word	0x00000000
 800105c:	40affe00 	.word	0x40affe00
 8001060:	00000000 	.word	0x00000000
 8001064:	40a9c800 	.word	0x40a9c800
 8001068:	3d4ccccd 	.word	0x3d4ccccd
 800106c:	3f666666 	.word	0x3f666666
 8001070:	20000180 	.word	0x20000180
 8001074:	2000008c 	.word	0x2000008c
 8001078:	20000170 	.word	0x20000170
 800107c:	20000194 	.word	0x20000194
 8001080:	66666667 	.word	0x66666667
 8001084:	20000174 	.word	0x20000174
 8001088:	080043dc 	.word	0x080043dc
 800108c:	20000198 	.word	0x20000198
 8001090:	2000012c 	.word	0x2000012c

08001094 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b094      	sub	sp, #80	; 0x50
 8001098:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800109a:	f107 0320 	add.w	r3, r7, #32
 800109e:	2230      	movs	r2, #48	; 0x30
 80010a0:	2100      	movs	r1, #0
 80010a2:	4618      	mov	r0, r3
 80010a4:	f002 fb8a 	bl	80037bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010a8:	f107 030c 	add.w	r3, r7, #12
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010b8:	2300      	movs	r3, #0
 80010ba:	60bb      	str	r3, [r7, #8]
 80010bc:	4b28      	ldr	r3, [pc, #160]	; (8001160 <SystemClock_Config+0xcc>)
 80010be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c0:	4a27      	ldr	r2, [pc, #156]	; (8001160 <SystemClock_Config+0xcc>)
 80010c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010c6:	6413      	str	r3, [r2, #64]	; 0x40
 80010c8:	4b25      	ldr	r3, [pc, #148]	; (8001160 <SystemClock_Config+0xcc>)
 80010ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d0:	60bb      	str	r3, [r7, #8]
 80010d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80010d4:	2300      	movs	r3, #0
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	4b22      	ldr	r3, [pc, #136]	; (8001164 <SystemClock_Config+0xd0>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010e0:	4a20      	ldr	r2, [pc, #128]	; (8001164 <SystemClock_Config+0xd0>)
 80010e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010e6:	6013      	str	r3, [r2, #0]
 80010e8:	4b1e      	ldr	r3, [pc, #120]	; (8001164 <SystemClock_Config+0xd0>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010f0:	607b      	str	r3, [r7, #4]
 80010f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010f4:	2302      	movs	r3, #2
 80010f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010f8:	2301      	movs	r3, #1
 80010fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010fc:	2310      	movs	r3, #16
 80010fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001100:	2302      	movs	r3, #2
 8001102:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001104:	2300      	movs	r3, #0
 8001106:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001108:	2308      	movs	r3, #8
 800110a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 800110c:	2354      	movs	r3, #84	; 0x54
 800110e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001110:	2302      	movs	r3, #2
 8001112:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001114:	2307      	movs	r3, #7
 8001116:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001118:	f107 0320 	add.w	r3, r7, #32
 800111c:	4618      	mov	r0, r3
 800111e:	f001 fa33 	bl	8002588 <HAL_RCC_OscConfig>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001128:	f000 f974 	bl	8001414 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800112c:	230f      	movs	r3, #15
 800112e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001130:	2302      	movs	r3, #2
 8001132:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001138:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800113c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800113e:	2300      	movs	r3, #0
 8001140:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001142:	f107 030c 	add.w	r3, r7, #12
 8001146:	2102      	movs	r1, #2
 8001148:	4618      	mov	r0, r3
 800114a:	f001 fc95 	bl	8002a78 <HAL_RCC_ClockConfig>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001154:	f000 f95e 	bl	8001414 <Error_Handler>
  }
}
 8001158:	bf00      	nop
 800115a:	3750      	adds	r7, #80	; 0x50
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40023800 	.word	0x40023800
 8001164:	40007000 	.word	0x40007000

08001168 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800116e:	463b      	mov	r3, r7
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800117a:	4b21      	ldr	r3, [pc, #132]	; (8001200 <MX_ADC1_Init+0x98>)
 800117c:	4a21      	ldr	r2, [pc, #132]	; (8001204 <MX_ADC1_Init+0x9c>)
 800117e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001180:	4b1f      	ldr	r3, [pc, #124]	; (8001200 <MX_ADC1_Init+0x98>)
 8001182:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001186:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001188:	4b1d      	ldr	r3, [pc, #116]	; (8001200 <MX_ADC1_Init+0x98>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800118e:	4b1c      	ldr	r3, [pc, #112]	; (8001200 <MX_ADC1_Init+0x98>)
 8001190:	2200      	movs	r2, #0
 8001192:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001194:	4b1a      	ldr	r3, [pc, #104]	; (8001200 <MX_ADC1_Init+0x98>)
 8001196:	2200      	movs	r2, #0
 8001198:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800119a:	4b19      	ldr	r3, [pc, #100]	; (8001200 <MX_ADC1_Init+0x98>)
 800119c:	2200      	movs	r2, #0
 800119e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011a2:	4b17      	ldr	r3, [pc, #92]	; (8001200 <MX_ADC1_Init+0x98>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011a8:	4b15      	ldr	r3, [pc, #84]	; (8001200 <MX_ADC1_Init+0x98>)
 80011aa:	4a17      	ldr	r2, [pc, #92]	; (8001208 <MX_ADC1_Init+0xa0>)
 80011ac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011ae:	4b14      	ldr	r3, [pc, #80]	; (8001200 <MX_ADC1_Init+0x98>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80011b4:	4b12      	ldr	r3, [pc, #72]	; (8001200 <MX_ADC1_Init+0x98>)
 80011b6:	2201      	movs	r2, #1
 80011b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011ba:	4b11      	ldr	r3, [pc, #68]	; (8001200 <MX_ADC1_Init+0x98>)
 80011bc:	2200      	movs	r2, #0
 80011be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011c2:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <MX_ADC1_Init+0x98>)
 80011c4:	2201      	movs	r2, #1
 80011c6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011c8:	480d      	ldr	r0, [pc, #52]	; (8001200 <MX_ADC1_Init+0x98>)
 80011ca:	f000 fb77 	bl	80018bc <HAL_ADC_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80011d4:	f000 f91e 	bl	8001414 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80011d8:	2300      	movs	r3, #0
 80011da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011dc:	2301      	movs	r3, #1
 80011de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011e0:	2300      	movs	r3, #0
 80011e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011e4:	463b      	mov	r3, r7
 80011e6:	4619      	mov	r1, r3
 80011e8:	4805      	ldr	r0, [pc, #20]	; (8001200 <MX_ADC1_Init+0x98>)
 80011ea:	f000 fd2b 	bl	8001c44 <HAL_ADC_ConfigChannel>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80011f4:	f000 f90e 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011f8:	bf00      	nop
 80011fa:	3710      	adds	r7, #16
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	2000008c 	.word	0x2000008c
 8001204:	40012000 	.word	0x40012000
 8001208:	0f000001 	.word	0x0f000001

0800120c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001210:	4b17      	ldr	r3, [pc, #92]	; (8001270 <MX_SPI2_Init+0x64>)
 8001212:	4a18      	ldr	r2, [pc, #96]	; (8001274 <MX_SPI2_Init+0x68>)
 8001214:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001216:	4b16      	ldr	r3, [pc, #88]	; (8001270 <MX_SPI2_Init+0x64>)
 8001218:	f44f 7282 	mov.w	r2, #260	; 0x104
 800121c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800121e:	4b14      	ldr	r3, [pc, #80]	; (8001270 <MX_SPI2_Init+0x64>)
 8001220:	2200      	movs	r2, #0
 8001222:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001224:	4b12      	ldr	r3, [pc, #72]	; (8001270 <MX_SPI2_Init+0x64>)
 8001226:	2200      	movs	r2, #0
 8001228:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800122a:	4b11      	ldr	r3, [pc, #68]	; (8001270 <MX_SPI2_Init+0x64>)
 800122c:	2200      	movs	r2, #0
 800122e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001230:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <MX_SPI2_Init+0x64>)
 8001232:	2200      	movs	r2, #0
 8001234:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8001236:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <MX_SPI2_Init+0x64>)
 8001238:	2200      	movs	r2, #0
 800123a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800123c:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <MX_SPI2_Init+0x64>)
 800123e:	2200      	movs	r2, #0
 8001240:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001242:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <MX_SPI2_Init+0x64>)
 8001244:	2200      	movs	r2, #0
 8001246:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001248:	4b09      	ldr	r3, [pc, #36]	; (8001270 <MX_SPI2_Init+0x64>)
 800124a:	2200      	movs	r2, #0
 800124c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800124e:	4b08      	ldr	r3, [pc, #32]	; (8001270 <MX_SPI2_Init+0x64>)
 8001250:	2200      	movs	r2, #0
 8001252:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001254:	4b06      	ldr	r3, [pc, #24]	; (8001270 <MX_SPI2_Init+0x64>)
 8001256:	220a      	movs	r2, #10
 8001258:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800125a:	4805      	ldr	r0, [pc, #20]	; (8001270 <MX_SPI2_Init+0x64>)
 800125c:	f001 fe2c 	bl	8002eb8 <HAL_SPI_Init>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_SPI2_Init+0x5e>
  {
    Error_Handler();
 8001266:	f000 f8d5 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	200000d4 	.word	0x200000d4
 8001274:	40003800 	.word	0x40003800

08001278 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800127c:	4b11      	ldr	r3, [pc, #68]	; (80012c4 <MX_USART2_UART_Init+0x4c>)
 800127e:	4a12      	ldr	r2, [pc, #72]	; (80012c8 <MX_USART2_UART_Init+0x50>)
 8001280:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001282:	4b10      	ldr	r3, [pc, #64]	; (80012c4 <MX_USART2_UART_Init+0x4c>)
 8001284:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001288:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800128a:	4b0e      	ldr	r3, [pc, #56]	; (80012c4 <MX_USART2_UART_Init+0x4c>)
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001290:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <MX_USART2_UART_Init+0x4c>)
 8001292:	2200      	movs	r2, #0
 8001294:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001296:	4b0b      	ldr	r3, [pc, #44]	; (80012c4 <MX_USART2_UART_Init+0x4c>)
 8001298:	2200      	movs	r2, #0
 800129a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800129c:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <MX_USART2_UART_Init+0x4c>)
 800129e:	220c      	movs	r2, #12
 80012a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012a2:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <MX_USART2_UART_Init+0x4c>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012a8:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <MX_USART2_UART_Init+0x4c>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012ae:	4805      	ldr	r0, [pc, #20]	; (80012c4 <MX_USART2_UART_Init+0x4c>)
 80012b0:	f001 fe8b 	bl	8002fca <HAL_UART_Init>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012ba:	f000 f8ab 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	2000012c 	.word	0x2000012c
 80012c8:	40004400 	.word	0x40004400

080012cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b08a      	sub	sp, #40	; 0x28
 80012d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d2:	f107 0314 	add.w	r3, r7, #20
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	609a      	str	r2, [r3, #8]
 80012de:	60da      	str	r2, [r3, #12]
 80012e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	613b      	str	r3, [r7, #16]
 80012e6:	4b47      	ldr	r3, [pc, #284]	; (8001404 <MX_GPIO_Init+0x138>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4a46      	ldr	r2, [pc, #280]	; (8001404 <MX_GPIO_Init+0x138>)
 80012ec:	f043 0304 	orr.w	r3, r3, #4
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b44      	ldr	r3, [pc, #272]	; (8001404 <MX_GPIO_Init+0x138>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f003 0304 	and.w	r3, r3, #4
 80012fa:	613b      	str	r3, [r7, #16]
 80012fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	4b40      	ldr	r3, [pc, #256]	; (8001404 <MX_GPIO_Init+0x138>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	4a3f      	ldr	r2, [pc, #252]	; (8001404 <MX_GPIO_Init+0x138>)
 8001308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800130c:	6313      	str	r3, [r2, #48]	; 0x30
 800130e:	4b3d      	ldr	r3, [pc, #244]	; (8001404 <MX_GPIO_Init+0x138>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	60bb      	str	r3, [r7, #8]
 800131e:	4b39      	ldr	r3, [pc, #228]	; (8001404 <MX_GPIO_Init+0x138>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	4a38      	ldr	r2, [pc, #224]	; (8001404 <MX_GPIO_Init+0x138>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	6313      	str	r3, [r2, #48]	; 0x30
 800132a:	4b36      	ldr	r3, [pc, #216]	; (8001404 <MX_GPIO_Init+0x138>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	60bb      	str	r3, [r7, #8]
 8001334:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	607b      	str	r3, [r7, #4]
 800133a:	4b32      	ldr	r3, [pc, #200]	; (8001404 <MX_GPIO_Init+0x138>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	4a31      	ldr	r2, [pc, #196]	; (8001404 <MX_GPIO_Init+0x138>)
 8001340:	f043 0302 	orr.w	r3, r3, #2
 8001344:	6313      	str	r3, [r2, #48]	; 0x30
 8001346:	4b2f      	ldr	r3, [pc, #188]	; (8001404 <MX_GPIO_Init+0x138>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	607b      	str	r3, [r7, #4]
 8001350:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001352:	2200      	movs	r2, #0
 8001354:	2120      	movs	r1, #32
 8001356:	482c      	ldr	r0, [pc, #176]	; (8001408 <MX_GPIO_Init+0x13c>)
 8001358:	f001 f8fc 	bl	8002554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800135c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001360:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001362:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001366:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800136c:	f107 0314 	add.w	r3, r7, #20
 8001370:	4619      	mov	r1, r3
 8001372:	4826      	ldr	r0, [pc, #152]	; (800140c <MX_GPIO_Init+0x140>)
 8001374:	f000 ff6a 	bl	800224c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001378:	2320      	movs	r3, #32
 800137a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137c:	2301      	movs	r3, #1
 800137e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001384:	2300      	movs	r3, #0
 8001386:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001388:	f107 0314 	add.w	r3, r7, #20
 800138c:	4619      	mov	r1, r3
 800138e:	481e      	ldr	r0, [pc, #120]	; (8001408 <MX_GPIO_Init+0x13c>)
 8001390:	f000 ff5c 	bl	800224c <HAL_GPIO_Init>

  /*Configure GPIO pin : LO__Pin */
  GPIO_InitStruct.Pin = LO__Pin;
 8001394:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001398:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800139a:	2300      	movs	r3, #0
 800139c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LO__GPIO_Port, &GPIO_InitStruct);
 80013a2:	f107 0314 	add.w	r3, r7, #20
 80013a6:	4619      	mov	r1, r3
 80013a8:	4817      	ldr	r0, [pc, #92]	; (8001408 <MX_GPIO_Init+0x13c>)
 80013aa:	f000 ff4f 	bl	800224c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80013ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013b4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013be:	f107 0314 	add.w	r3, r7, #20
 80013c2:	4619      	mov	r1, r3
 80013c4:	4810      	ldr	r0, [pc, #64]	; (8001408 <MX_GPIO_Init+0x13c>)
 80013c6:	f000 ff41 	bl	800224c <HAL_GPIO_Init>

  /*Configure GPIO pin : LO_B3_Pin */
  GPIO_InitStruct.Pin = LO_B3_Pin;
 80013ca:	2308      	movs	r3, #8
 80013cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ce:	2300      	movs	r3, #0
 80013d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LO_B3_GPIO_Port, &GPIO_InitStruct);
 80013d6:	f107 0314 	add.w	r3, r7, #20
 80013da:	4619      	mov	r1, r3
 80013dc:	480c      	ldr	r0, [pc, #48]	; (8001410 <MX_GPIO_Init+0x144>)
 80013de:	f000 ff35 	bl	800224c <HAL_GPIO_Init>

  /*Configure GPIO pin : output_Pin */
  GPIO_InitStruct.Pin = output_Pin;
 80013e2:	2320      	movs	r3, #32
 80013e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013e6:	2303      	movs	r3, #3
 80013e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(output_GPIO_Port, &GPIO_InitStruct);
 80013ee:	f107 0314 	add.w	r3, r7, #20
 80013f2:	4619      	mov	r1, r3
 80013f4:	4806      	ldr	r0, [pc, #24]	; (8001410 <MX_GPIO_Init+0x144>)
 80013f6:	f000 ff29 	bl	800224c <HAL_GPIO_Init>

}
 80013fa:	bf00      	nop
 80013fc:	3728      	adds	r7, #40	; 0x28
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40023800 	.word	0x40023800
 8001408:	40020000 	.word	0x40020000
 800140c:	40020800 	.word	0x40020800
 8001410:	40020400 	.word	0x40020400

08001414 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001418:	b672      	cpsid	i
}
 800141a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800141c:	e7fe      	b.n	800141c <Error_Handler+0x8>
	...

08001420 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	607b      	str	r3, [r7, #4]
 800142a:	4b10      	ldr	r3, [pc, #64]	; (800146c <HAL_MspInit+0x4c>)
 800142c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142e:	4a0f      	ldr	r2, [pc, #60]	; (800146c <HAL_MspInit+0x4c>)
 8001430:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001434:	6453      	str	r3, [r2, #68]	; 0x44
 8001436:	4b0d      	ldr	r3, [pc, #52]	; (800146c <HAL_MspInit+0x4c>)
 8001438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800143e:	607b      	str	r3, [r7, #4]
 8001440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	603b      	str	r3, [r7, #0]
 8001446:	4b09      	ldr	r3, [pc, #36]	; (800146c <HAL_MspInit+0x4c>)
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	4a08      	ldr	r2, [pc, #32]	; (800146c <HAL_MspInit+0x4c>)
 800144c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001450:	6413      	str	r3, [r2, #64]	; 0x40
 8001452:	4b06      	ldr	r3, [pc, #24]	; (800146c <HAL_MspInit+0x4c>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145a:	603b      	str	r3, [r7, #0]
 800145c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800145e:	2007      	movs	r0, #7
 8001460:	f000 fec0 	bl	80021e4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001464:	bf00      	nop
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40023800 	.word	0x40023800

08001470 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08a      	sub	sp, #40	; 0x28
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a17      	ldr	r2, [pc, #92]	; (80014ec <HAL_ADC_MspInit+0x7c>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d127      	bne.n	80014e2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	613b      	str	r3, [r7, #16]
 8001496:	4b16      	ldr	r3, [pc, #88]	; (80014f0 <HAL_ADC_MspInit+0x80>)
 8001498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149a:	4a15      	ldr	r2, [pc, #84]	; (80014f0 <HAL_ADC_MspInit+0x80>)
 800149c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014a0:	6453      	str	r3, [r2, #68]	; 0x44
 80014a2:	4b13      	ldr	r3, [pc, #76]	; (80014f0 <HAL_ADC_MspInit+0x80>)
 80014a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014aa:	613b      	str	r3, [r7, #16]
 80014ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	4b0f      	ldr	r3, [pc, #60]	; (80014f0 <HAL_ADC_MspInit+0x80>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	4a0e      	ldr	r2, [pc, #56]	; (80014f0 <HAL_ADC_MspInit+0x80>)
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	6313      	str	r3, [r2, #48]	; 0x30
 80014be:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <HAL_ADC_MspInit+0x80>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014ca:	2301      	movs	r3, #1
 80014cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014ce:	2303      	movs	r3, #3
 80014d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d6:	f107 0314 	add.w	r3, r7, #20
 80014da:	4619      	mov	r1, r3
 80014dc:	4805      	ldr	r0, [pc, #20]	; (80014f4 <HAL_ADC_MspInit+0x84>)
 80014de:	f000 feb5 	bl	800224c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014e2:	bf00      	nop
 80014e4:	3728      	adds	r7, #40	; 0x28
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40012000 	.word	0x40012000
 80014f0:	40023800 	.word	0x40023800
 80014f4:	40020000 	.word	0x40020000

080014f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08a      	sub	sp, #40	; 0x28
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
 800150e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a28      	ldr	r2, [pc, #160]	; (80015b8 <HAL_SPI_MspInit+0xc0>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d14a      	bne.n	80015b0 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	613b      	str	r3, [r7, #16]
 800151e:	4b27      	ldr	r3, [pc, #156]	; (80015bc <HAL_SPI_MspInit+0xc4>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	4a26      	ldr	r2, [pc, #152]	; (80015bc <HAL_SPI_MspInit+0xc4>)
 8001524:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001528:	6413      	str	r3, [r2, #64]	; 0x40
 800152a:	4b24      	ldr	r3, [pc, #144]	; (80015bc <HAL_SPI_MspInit+0xc4>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001532:	613b      	str	r3, [r7, #16]
 8001534:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	4b20      	ldr	r3, [pc, #128]	; (80015bc <HAL_SPI_MspInit+0xc4>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	4a1f      	ldr	r2, [pc, #124]	; (80015bc <HAL_SPI_MspInit+0xc4>)
 8001540:	f043 0304 	orr.w	r3, r3, #4
 8001544:	6313      	str	r3, [r2, #48]	; 0x30
 8001546:	4b1d      	ldr	r3, [pc, #116]	; (80015bc <HAL_SPI_MspInit+0xc4>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	f003 0304 	and.w	r3, r3, #4
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	60bb      	str	r3, [r7, #8]
 8001556:	4b19      	ldr	r3, [pc, #100]	; (80015bc <HAL_SPI_MspInit+0xc4>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	4a18      	ldr	r2, [pc, #96]	; (80015bc <HAL_SPI_MspInit+0xc4>)
 800155c:	f043 0302 	orr.w	r3, r3, #2
 8001560:	6313      	str	r3, [r2, #48]	; 0x30
 8001562:	4b16      	ldr	r3, [pc, #88]	; (80015bc <HAL_SPI_MspInit+0xc4>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	60bb      	str	r3, [r7, #8]
 800156c:	68bb      	ldr	r3, [r7, #8]
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    PB12     ------> SPI2_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800156e:	230c      	movs	r3, #12
 8001570:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001572:	2302      	movs	r3, #2
 8001574:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800157a:	2303      	movs	r3, #3
 800157c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800157e:	2305      	movs	r3, #5
 8001580:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001582:	f107 0314 	add.w	r3, r7, #20
 8001586:	4619      	mov	r1, r3
 8001588:	480d      	ldr	r0, [pc, #52]	; (80015c0 <HAL_SPI_MspInit+0xc8>)
 800158a:	f000 fe5f 	bl	800224c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800158e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001592:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001594:	2302      	movs	r3, #2
 8001596:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159c:	2303      	movs	r3, #3
 800159e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015a0:	2305      	movs	r3, #5
 80015a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	4619      	mov	r1, r3
 80015aa:	4806      	ldr	r0, [pc, #24]	; (80015c4 <HAL_SPI_MspInit+0xcc>)
 80015ac:	f000 fe4e 	bl	800224c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80015b0:	bf00      	nop
 80015b2:	3728      	adds	r7, #40	; 0x28
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40003800 	.word	0x40003800
 80015bc:	40023800 	.word	0x40023800
 80015c0:	40020800 	.word	0x40020800
 80015c4:	40020400 	.word	0x40020400

080015c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b08a      	sub	sp, #40	; 0x28
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d0:	f107 0314 	add.w	r3, r7, #20
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	60da      	str	r2, [r3, #12]
 80015de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a19      	ldr	r2, [pc, #100]	; (800164c <HAL_UART_MspInit+0x84>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d12b      	bne.n	8001642 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	613b      	str	r3, [r7, #16]
 80015ee:	4b18      	ldr	r3, [pc, #96]	; (8001650 <HAL_UART_MspInit+0x88>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f2:	4a17      	ldr	r2, [pc, #92]	; (8001650 <HAL_UART_MspInit+0x88>)
 80015f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015f8:	6413      	str	r3, [r2, #64]	; 0x40
 80015fa:	4b15      	ldr	r3, [pc, #84]	; (8001650 <HAL_UART_MspInit+0x88>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001602:	613b      	str	r3, [r7, #16]
 8001604:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	60fb      	str	r3, [r7, #12]
 800160a:	4b11      	ldr	r3, [pc, #68]	; (8001650 <HAL_UART_MspInit+0x88>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	4a10      	ldr	r2, [pc, #64]	; (8001650 <HAL_UART_MspInit+0x88>)
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	6313      	str	r3, [r2, #48]	; 0x30
 8001616:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <HAL_UART_MspInit+0x88>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001622:	230c      	movs	r3, #12
 8001624:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001626:	2302      	movs	r3, #2
 8001628:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162e:	2300      	movs	r3, #0
 8001630:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001632:	2307      	movs	r3, #7
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001636:	f107 0314 	add.w	r3, r7, #20
 800163a:	4619      	mov	r1, r3
 800163c:	4805      	ldr	r0, [pc, #20]	; (8001654 <HAL_UART_MspInit+0x8c>)
 800163e:	f000 fe05 	bl	800224c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001642:	bf00      	nop
 8001644:	3728      	adds	r7, #40	; 0x28
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40004400 	.word	0x40004400
 8001650:	40023800 	.word	0x40023800
 8001654:	40020000 	.word	0x40020000

08001658 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800165c:	e7fe      	b.n	800165c <NMI_Handler+0x4>

0800165e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001662:	e7fe      	b.n	8001662 <HardFault_Handler+0x4>

08001664 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001668:	e7fe      	b.n	8001668 <MemManage_Handler+0x4>

0800166a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800166e:	e7fe      	b.n	800166e <BusFault_Handler+0x4>

08001670 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001674:	e7fe      	b.n	8001674 <UsageFault_Handler+0x4>

08001676 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001676:	b480      	push	{r7}
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016a4:	f000 f8c6 	bl	8001834 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}

080016ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016b4:	4a14      	ldr	r2, [pc, #80]	; (8001708 <_sbrk+0x5c>)
 80016b6:	4b15      	ldr	r3, [pc, #84]	; (800170c <_sbrk+0x60>)
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016c0:	4b13      	ldr	r3, [pc, #76]	; (8001710 <_sbrk+0x64>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d102      	bne.n	80016ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016c8:	4b11      	ldr	r3, [pc, #68]	; (8001710 <_sbrk+0x64>)
 80016ca:	4a12      	ldr	r2, [pc, #72]	; (8001714 <_sbrk+0x68>)
 80016cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016ce:	4b10      	ldr	r3, [pc, #64]	; (8001710 <_sbrk+0x64>)
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4413      	add	r3, r2
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d207      	bcs.n	80016ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016dc:	f002 f836 	bl	800374c <__errno>
 80016e0:	4603      	mov	r3, r0
 80016e2:	220c      	movs	r2, #12
 80016e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016e6:	f04f 33ff 	mov.w	r3, #4294967295
 80016ea:	e009      	b.n	8001700 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016ec:	4b08      	ldr	r3, [pc, #32]	; (8001710 <_sbrk+0x64>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016f2:	4b07      	ldr	r3, [pc, #28]	; (8001710 <_sbrk+0x64>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4413      	add	r3, r2
 80016fa:	4a05      	ldr	r2, [pc, #20]	; (8001710 <_sbrk+0x64>)
 80016fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016fe:	68fb      	ldr	r3, [r7, #12]
}
 8001700:	4618      	mov	r0, r3
 8001702:	3718      	adds	r7, #24
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	20018000 	.word	0x20018000
 800170c:	00000400 	.word	0x00000400
 8001710:	200001cc 	.word	0x200001cc
 8001714:	200001e8 	.word	0x200001e8

08001718 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800171c:	4b06      	ldr	r3, [pc, #24]	; (8001738 <SystemInit+0x20>)
 800171e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001722:	4a05      	ldr	r2, [pc, #20]	; (8001738 <SystemInit+0x20>)
 8001724:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001728:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	e000ed00 	.word	0xe000ed00

0800173c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800173c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001774 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001740:	480d      	ldr	r0, [pc, #52]	; (8001778 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001742:	490e      	ldr	r1, [pc, #56]	; (800177c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001744:	4a0e      	ldr	r2, [pc, #56]	; (8001780 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001746:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001748:	e002      	b.n	8001750 <LoopCopyDataInit>

0800174a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800174a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800174c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800174e:	3304      	adds	r3, #4

08001750 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001750:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001752:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001754:	d3f9      	bcc.n	800174a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001756:	4a0b      	ldr	r2, [pc, #44]	; (8001784 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001758:	4c0b      	ldr	r4, [pc, #44]	; (8001788 <LoopFillZerobss+0x26>)
  movs r3, #0
 800175a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800175c:	e001      	b.n	8001762 <LoopFillZerobss>

0800175e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800175e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001760:	3204      	adds	r2, #4

08001762 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001762:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001764:	d3fb      	bcc.n	800175e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001766:	f7ff ffd7 	bl	8001718 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800176a:	f001 fff5 	bl	8003758 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800176e:	f7ff fbd7 	bl	8000f20 <main>
  bx  lr    
 8001772:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001774:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001778:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800177c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001780:	08004450 	.word	0x08004450
  ldr r2, =_sbss
 8001784:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001788:	200001e4 	.word	0x200001e4

0800178c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800178c:	e7fe      	b.n	800178c <ADC_IRQHandler>
	...

08001790 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001794:	4b0e      	ldr	r3, [pc, #56]	; (80017d0 <HAL_Init+0x40>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a0d      	ldr	r2, [pc, #52]	; (80017d0 <HAL_Init+0x40>)
 800179a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800179e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017a0:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <HAL_Init+0x40>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a0a      	ldr	r2, [pc, #40]	; (80017d0 <HAL_Init+0x40>)
 80017a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017ac:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <HAL_Init+0x40>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a07      	ldr	r2, [pc, #28]	; (80017d0 <HAL_Init+0x40>)
 80017b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017b8:	2003      	movs	r0, #3
 80017ba:	f000 fd13 	bl	80021e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017be:	2000      	movs	r0, #0
 80017c0:	f000 f808 	bl	80017d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017c4:	f7ff fe2c 	bl	8001420 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40023c00 	.word	0x40023c00

080017d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017dc:	4b12      	ldr	r3, [pc, #72]	; (8001828 <HAL_InitTick+0x54>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	4b12      	ldr	r3, [pc, #72]	; (800182c <HAL_InitTick+0x58>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	4619      	mov	r1, r3
 80017e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f2:	4618      	mov	r0, r3
 80017f4:	f000 fd1d 	bl	8002232 <HAL_SYSTICK_Config>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e00e      	b.n	8001820 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2b0f      	cmp	r3, #15
 8001806:	d80a      	bhi.n	800181e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001808:	2200      	movs	r2, #0
 800180a:	6879      	ldr	r1, [r7, #4]
 800180c:	f04f 30ff 	mov.w	r0, #4294967295
 8001810:	f000 fcf3 	bl	80021fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001814:	4a06      	ldr	r2, [pc, #24]	; (8001830 <HAL_InitTick+0x5c>)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800181a:	2300      	movs	r3, #0
 800181c:	e000      	b.n	8001820 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
}
 8001820:	4618      	mov	r0, r3
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	20000000 	.word	0x20000000
 800182c:	20000008 	.word	0x20000008
 8001830:	20000004 	.word	0x20000004

08001834 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001838:	4b06      	ldr	r3, [pc, #24]	; (8001854 <HAL_IncTick+0x20>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	461a      	mov	r2, r3
 800183e:	4b06      	ldr	r3, [pc, #24]	; (8001858 <HAL_IncTick+0x24>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4413      	add	r3, r2
 8001844:	4a04      	ldr	r2, [pc, #16]	; (8001858 <HAL_IncTick+0x24>)
 8001846:	6013      	str	r3, [r2, #0]
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	20000008 	.word	0x20000008
 8001858:	200001d0 	.word	0x200001d0

0800185c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  return uwTick;
 8001860:	4b03      	ldr	r3, [pc, #12]	; (8001870 <HAL_GetTick+0x14>)
 8001862:	681b      	ldr	r3, [r3, #0]
}
 8001864:	4618      	mov	r0, r3
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	200001d0 	.word	0x200001d0

08001874 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800187c:	f7ff ffee 	bl	800185c <HAL_GetTick>
 8001880:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800188c:	d005      	beq.n	800189a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800188e:	4b0a      	ldr	r3, [pc, #40]	; (80018b8 <HAL_Delay+0x44>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	461a      	mov	r2, r3
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	4413      	add	r3, r2
 8001898:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800189a:	bf00      	nop
 800189c:	f7ff ffde 	bl	800185c <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	68fa      	ldr	r2, [r7, #12]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d8f7      	bhi.n	800189c <HAL_Delay+0x28>
  {
  }
}
 80018ac:	bf00      	nop
 80018ae:	bf00      	nop
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20000008 	.word	0x20000008

080018bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018c4:	2300      	movs	r3, #0
 80018c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d101      	bne.n	80018d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e033      	b.n	800193a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d109      	bne.n	80018ee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7ff fdc8 	bl	8001470 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2200      	movs	r2, #0
 80018e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	f003 0310 	and.w	r3, r3, #16
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d118      	bne.n	800192c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001902:	f023 0302 	bic.w	r3, r3, #2
 8001906:	f043 0202 	orr.w	r2, r3, #2
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f000 faba 	bl	8001e88 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191e:	f023 0303 	bic.w	r3, r3, #3
 8001922:	f043 0201 	orr.w	r2, r3, #1
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	641a      	str	r2, [r3, #64]	; 0x40
 800192a:	e001      	b.n	8001930 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2200      	movs	r2, #0
 8001934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001938:	7bfb      	ldrb	r3, [r7, #15]
}
 800193a:	4618      	mov	r0, r3
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
	...

08001944 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800194c:	2300      	movs	r3, #0
 800194e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001956:	2b01      	cmp	r3, #1
 8001958:	d101      	bne.n	800195e <HAL_ADC_Start+0x1a>
 800195a:	2302      	movs	r3, #2
 800195c:	e097      	b.n	8001a8e <HAL_ADC_Start+0x14a>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2201      	movs	r2, #1
 8001962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f003 0301 	and.w	r3, r3, #1
 8001970:	2b01      	cmp	r3, #1
 8001972:	d018      	beq.n	80019a6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	689a      	ldr	r2, [r3, #8]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f042 0201 	orr.w	r2, r2, #1
 8001982:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001984:	4b45      	ldr	r3, [pc, #276]	; (8001a9c <HAL_ADC_Start+0x158>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a45      	ldr	r2, [pc, #276]	; (8001aa0 <HAL_ADC_Start+0x15c>)
 800198a:	fba2 2303 	umull	r2, r3, r2, r3
 800198e:	0c9a      	lsrs	r2, r3, #18
 8001990:	4613      	mov	r3, r2
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	4413      	add	r3, r2
 8001996:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001998:	e002      	b.n	80019a0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	3b01      	subs	r3, #1
 800199e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1f9      	bne.n	800199a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f003 0301 	and.w	r3, r3, #1
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d15f      	bne.n	8001a74 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80019bc:	f023 0301 	bic.w	r3, r3, #1
 80019c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d007      	beq.n	80019e6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019da:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019de:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019f2:	d106      	bne.n	8001a02 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f8:	f023 0206 	bic.w	r2, r3, #6
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	645a      	str	r2, [r3, #68]	; 0x44
 8001a00:	e002      	b.n	8001a08 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a10:	4b24      	ldr	r3, [pc, #144]	; (8001aa4 <HAL_ADC_Start+0x160>)
 8001a12:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001a1c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f003 031f 	and.w	r3, r3, #31
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d10f      	bne.n	8001a4a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d129      	bne.n	8001a8c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	689a      	ldr	r2, [r3, #8]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	e020      	b.n	8001a8c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a16      	ldr	r2, [pc, #88]	; (8001aa8 <HAL_ADC_Start+0x164>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d11b      	bne.n	8001a8c <HAL_ADC_Start+0x148>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d114      	bne.n	8001a8c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	689a      	ldr	r2, [r3, #8]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a70:	609a      	str	r2, [r3, #8]
 8001a72:	e00b      	b.n	8001a8c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a78:	f043 0210 	orr.w	r2, r3, #16
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a84:	f043 0201 	orr.w	r2, r3, #1
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3714      	adds	r7, #20
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	20000000 	.word	0x20000000
 8001aa0:	431bde83 	.word	0x431bde83
 8001aa4:	40012300 	.word	0x40012300
 8001aa8:	40012000 	.word	0x40012000

08001aac <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d101      	bne.n	8001ac2 <HAL_ADC_Stop+0x16>
 8001abe:	2302      	movs	r3, #2
 8001ac0:	e021      	b.n	8001b06 <HAL_ADC_Stop+0x5a>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	689a      	ldr	r2, [r3, #8]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f022 0201 	bic.w	r2, r2, #1
 8001ad8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f003 0301 	and.w	r3, r3, #1
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d109      	bne.n	8001afc <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001af0:	f023 0301 	bic.w	r3, r3, #1
 8001af4:	f043 0201 	orr.w	r2, r3, #1
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b084      	sub	sp, #16
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
 8001b1a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b2e:	d113      	bne.n	8001b58 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001b3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b3e:	d10b      	bne.n	8001b58 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b44:	f043 0220 	orr.w	r2, r3, #32
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e063      	b.n	8001c20 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001b58:	f7ff fe80 	bl	800185c <HAL_GetTick>
 8001b5c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b5e:	e021      	b.n	8001ba4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b66:	d01d      	beq.n	8001ba4 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d007      	beq.n	8001b7e <HAL_ADC_PollForConversion+0x6c>
 8001b6e:	f7ff fe75 	bl	800185c <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d212      	bcs.n	8001ba4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d00b      	beq.n	8001ba4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b90:	f043 0204 	orr.w	r2, r3, #4
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e03d      	b.n	8001c20 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d1d6      	bne.n	8001b60 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f06f 0212 	mvn.w	r2, #18
 8001bba:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d123      	bne.n	8001c1e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d11f      	bne.n	8001c1e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d006      	beq.n	8001bfa <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d111      	bne.n	8001c1e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d105      	bne.n	8001c1e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c16:	f043 0201 	orr.w	r2, r3, #1
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3710      	adds	r7, #16
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
	...

08001c44 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d101      	bne.n	8001c60 <HAL_ADC_ConfigChannel+0x1c>
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	e105      	b.n	8001e6c <HAL_ADC_ConfigChannel+0x228>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2b09      	cmp	r3, #9
 8001c6e:	d925      	bls.n	8001cbc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	68d9      	ldr	r1, [r3, #12]
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	4613      	mov	r3, r2
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	4413      	add	r3, r2
 8001c84:	3b1e      	subs	r3, #30
 8001c86:	2207      	movs	r2, #7
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	43da      	mvns	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	400a      	ands	r2, r1
 8001c94:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68d9      	ldr	r1, [r3, #12]
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	689a      	ldr	r2, [r3, #8]
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	4603      	mov	r3, r0
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	4403      	add	r3, r0
 8001cae:	3b1e      	subs	r3, #30
 8001cb0:	409a      	lsls	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	60da      	str	r2, [r3, #12]
 8001cba:	e022      	b.n	8001d02 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	6919      	ldr	r1, [r3, #16]
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	461a      	mov	r2, r3
 8001cca:	4613      	mov	r3, r2
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	4413      	add	r3, r2
 8001cd0:	2207      	movs	r2, #7
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	43da      	mvns	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	400a      	ands	r2, r1
 8001cde:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	6919      	ldr	r1, [r3, #16]
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	689a      	ldr	r2, [r3, #8]
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	4403      	add	r3, r0
 8001cf8:	409a      	lsls	r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	2b06      	cmp	r3, #6
 8001d08:	d824      	bhi.n	8001d54 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685a      	ldr	r2, [r3, #4]
 8001d14:	4613      	mov	r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	4413      	add	r3, r2
 8001d1a:	3b05      	subs	r3, #5
 8001d1c:	221f      	movs	r2, #31
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	43da      	mvns	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	400a      	ands	r2, r1
 8001d2a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	4618      	mov	r0, r3
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685a      	ldr	r2, [r3, #4]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	4413      	add	r3, r2
 8001d44:	3b05      	subs	r3, #5
 8001d46:	fa00 f203 	lsl.w	r2, r0, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	635a      	str	r2, [r3, #52]	; 0x34
 8001d52:	e04c      	b.n	8001dee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	2b0c      	cmp	r3, #12
 8001d5a:	d824      	bhi.n	8001da6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685a      	ldr	r2, [r3, #4]
 8001d66:	4613      	mov	r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	4413      	add	r3, r2
 8001d6c:	3b23      	subs	r3, #35	; 0x23
 8001d6e:	221f      	movs	r2, #31
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	43da      	mvns	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	400a      	ands	r2, r1
 8001d7c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685a      	ldr	r2, [r3, #4]
 8001d90:	4613      	mov	r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	4413      	add	r3, r2
 8001d96:	3b23      	subs	r3, #35	; 0x23
 8001d98:	fa00 f203 	lsl.w	r2, r0, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	430a      	orrs	r2, r1
 8001da2:	631a      	str	r2, [r3, #48]	; 0x30
 8001da4:	e023      	b.n	8001dee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685a      	ldr	r2, [r3, #4]
 8001db0:	4613      	mov	r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	4413      	add	r3, r2
 8001db6:	3b41      	subs	r3, #65	; 0x41
 8001db8:	221f      	movs	r2, #31
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	43da      	mvns	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	400a      	ands	r2, r1
 8001dc6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685a      	ldr	r2, [r3, #4]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	4413      	add	r3, r2
 8001de0:	3b41      	subs	r3, #65	; 0x41
 8001de2:	fa00 f203 	lsl.w	r2, r0, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	430a      	orrs	r2, r1
 8001dec:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dee:	4b22      	ldr	r3, [pc, #136]	; (8001e78 <HAL_ADC_ConfigChannel+0x234>)
 8001df0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a21      	ldr	r2, [pc, #132]	; (8001e7c <HAL_ADC_ConfigChannel+0x238>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d109      	bne.n	8001e10 <HAL_ADC_ConfigChannel+0x1cc>
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2b12      	cmp	r3, #18
 8001e02:	d105      	bne.n	8001e10 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a19      	ldr	r2, [pc, #100]	; (8001e7c <HAL_ADC_ConfigChannel+0x238>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d123      	bne.n	8001e62 <HAL_ADC_ConfigChannel+0x21e>
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2b10      	cmp	r3, #16
 8001e20:	d003      	beq.n	8001e2a <HAL_ADC_ConfigChannel+0x1e6>
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2b11      	cmp	r3, #17
 8001e28:	d11b      	bne.n	8001e62 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2b10      	cmp	r3, #16
 8001e3c:	d111      	bne.n	8001e62 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e3e:	4b10      	ldr	r3, [pc, #64]	; (8001e80 <HAL_ADC_ConfigChannel+0x23c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a10      	ldr	r2, [pc, #64]	; (8001e84 <HAL_ADC_ConfigChannel+0x240>)
 8001e44:	fba2 2303 	umull	r2, r3, r2, r3
 8001e48:	0c9a      	lsrs	r2, r3, #18
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	4413      	add	r3, r2
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e54:	e002      	b.n	8001e5c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	3b01      	subs	r3, #1
 8001e5a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1f9      	bne.n	8001e56 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001e6a:	2300      	movs	r3, #0
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3714      	adds	r7, #20
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	40012300 	.word	0x40012300
 8001e7c:	40012000 	.word	0x40012000
 8001e80:	20000000 	.word	0x20000000
 8001e84:	431bde83 	.word	0x431bde83

08001e88 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e90:	4b79      	ldr	r3, [pc, #484]	; (8002078 <ADC_Init+0x1f0>)
 8001e92:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	685a      	ldr	r2, [r3, #4]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	431a      	orrs	r2, r3
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	685a      	ldr	r2, [r3, #4]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ebc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	6859      	ldr	r1, [r3, #4]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	021a      	lsls	r2, r3, #8
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	685a      	ldr	r2, [r3, #4]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001ee0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	6859      	ldr	r1, [r3, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	689a      	ldr	r2, [r3, #8]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6899      	ldr	r1, [r3, #8]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68da      	ldr	r2, [r3, #12]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	430a      	orrs	r2, r1
 8001f14:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f1a:	4a58      	ldr	r2, [pc, #352]	; (800207c <ADC_Init+0x1f4>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d022      	beq.n	8001f66 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	689a      	ldr	r2, [r3, #8]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f2e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	6899      	ldr	r1, [r3, #8]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	6899      	ldr	r1, [r3, #8]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	430a      	orrs	r2, r1
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	e00f      	b.n	8001f86 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	689a      	ldr	r2, [r3, #8]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f74:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f84:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 0202 	bic.w	r2, r2, #2
 8001f94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6899      	ldr	r1, [r3, #8]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	7e1b      	ldrb	r3, [r3, #24]
 8001fa0:	005a      	lsls	r2, r3, #1
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d01b      	beq.n	8001fec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	685a      	ldr	r2, [r3, #4]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fc2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	685a      	ldr	r2, [r3, #4]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001fd2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6859      	ldr	r1, [r3, #4]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	035a      	lsls	r2, r3, #13
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	605a      	str	r2, [r3, #4]
 8001fea:	e007      	b.n	8001ffc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	685a      	ldr	r2, [r3, #4]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ffa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800200a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	3b01      	subs	r3, #1
 8002018:	051a      	lsls	r2, r3, #20
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	430a      	orrs	r2, r1
 8002020:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002030:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	6899      	ldr	r1, [r3, #8]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800203e:	025a      	lsls	r2, r3, #9
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	430a      	orrs	r2, r1
 8002046:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	689a      	ldr	r2, [r3, #8]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002056:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6899      	ldr	r1, [r3, #8]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	029a      	lsls	r2, r3, #10
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	430a      	orrs	r2, r1
 800206a:	609a      	str	r2, [r3, #8]
}
 800206c:	bf00      	nop
 800206e:	3714      	adds	r7, #20
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	40012300 	.word	0x40012300
 800207c:	0f000001 	.word	0x0f000001

08002080 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002090:	4b0c      	ldr	r3, [pc, #48]	; (80020c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002096:	68ba      	ldr	r2, [r7, #8]
 8002098:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800209c:	4013      	ands	r3, r2
 800209e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020b2:	4a04      	ldr	r2, [pc, #16]	; (80020c4 <__NVIC_SetPriorityGrouping+0x44>)
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	60d3      	str	r3, [r2, #12]
}
 80020b8:	bf00      	nop
 80020ba:	3714      	adds	r7, #20
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	e000ed00 	.word	0xe000ed00

080020c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020cc:	4b04      	ldr	r3, [pc, #16]	; (80020e0 <__NVIC_GetPriorityGrouping+0x18>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	0a1b      	lsrs	r3, r3, #8
 80020d2:	f003 0307 	and.w	r3, r3, #7
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	e000ed00 	.word	0xe000ed00

080020e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	4603      	mov	r3, r0
 80020ec:	6039      	str	r1, [r7, #0]
 80020ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	db0a      	blt.n	800210e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	b2da      	uxtb	r2, r3
 80020fc:	490c      	ldr	r1, [pc, #48]	; (8002130 <__NVIC_SetPriority+0x4c>)
 80020fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002102:	0112      	lsls	r2, r2, #4
 8002104:	b2d2      	uxtb	r2, r2
 8002106:	440b      	add	r3, r1
 8002108:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800210c:	e00a      	b.n	8002124 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	b2da      	uxtb	r2, r3
 8002112:	4908      	ldr	r1, [pc, #32]	; (8002134 <__NVIC_SetPriority+0x50>)
 8002114:	79fb      	ldrb	r3, [r7, #7]
 8002116:	f003 030f 	and.w	r3, r3, #15
 800211a:	3b04      	subs	r3, #4
 800211c:	0112      	lsls	r2, r2, #4
 800211e:	b2d2      	uxtb	r2, r2
 8002120:	440b      	add	r3, r1
 8002122:	761a      	strb	r2, [r3, #24]
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	e000e100 	.word	0xe000e100
 8002134:	e000ed00 	.word	0xe000ed00

08002138 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002138:	b480      	push	{r7}
 800213a:	b089      	sub	sp, #36	; 0x24
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f003 0307 	and.w	r3, r3, #7
 800214a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	f1c3 0307 	rsb	r3, r3, #7
 8002152:	2b04      	cmp	r3, #4
 8002154:	bf28      	it	cs
 8002156:	2304      	movcs	r3, #4
 8002158:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	3304      	adds	r3, #4
 800215e:	2b06      	cmp	r3, #6
 8002160:	d902      	bls.n	8002168 <NVIC_EncodePriority+0x30>
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	3b03      	subs	r3, #3
 8002166:	e000      	b.n	800216a <NVIC_EncodePriority+0x32>
 8002168:	2300      	movs	r3, #0
 800216a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800216c:	f04f 32ff 	mov.w	r2, #4294967295
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	43da      	mvns	r2, r3
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	401a      	ands	r2, r3
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002180:	f04f 31ff 	mov.w	r1, #4294967295
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	fa01 f303 	lsl.w	r3, r1, r3
 800218a:	43d9      	mvns	r1, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002190:	4313      	orrs	r3, r2
         );
}
 8002192:	4618      	mov	r0, r3
 8002194:	3724      	adds	r7, #36	; 0x24
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
	...

080021a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	3b01      	subs	r3, #1
 80021ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021b0:	d301      	bcc.n	80021b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021b2:	2301      	movs	r3, #1
 80021b4:	e00f      	b.n	80021d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021b6:	4a0a      	ldr	r2, [pc, #40]	; (80021e0 <SysTick_Config+0x40>)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	3b01      	subs	r3, #1
 80021bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021be:	210f      	movs	r1, #15
 80021c0:	f04f 30ff 	mov.w	r0, #4294967295
 80021c4:	f7ff ff8e 	bl	80020e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021c8:	4b05      	ldr	r3, [pc, #20]	; (80021e0 <SysTick_Config+0x40>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021ce:	4b04      	ldr	r3, [pc, #16]	; (80021e0 <SysTick_Config+0x40>)
 80021d0:	2207      	movs	r2, #7
 80021d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	e000e010 	.word	0xe000e010

080021e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f7ff ff47 	bl	8002080 <__NVIC_SetPriorityGrouping>
}
 80021f2:	bf00      	nop
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b086      	sub	sp, #24
 80021fe:	af00      	add	r7, sp, #0
 8002200:	4603      	mov	r3, r0
 8002202:	60b9      	str	r1, [r7, #8]
 8002204:	607a      	str	r2, [r7, #4]
 8002206:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002208:	2300      	movs	r3, #0
 800220a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800220c:	f7ff ff5c 	bl	80020c8 <__NVIC_GetPriorityGrouping>
 8002210:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	68b9      	ldr	r1, [r7, #8]
 8002216:	6978      	ldr	r0, [r7, #20]
 8002218:	f7ff ff8e 	bl	8002138 <NVIC_EncodePriority>
 800221c:	4602      	mov	r2, r0
 800221e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002222:	4611      	mov	r1, r2
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff ff5d 	bl	80020e4 <__NVIC_SetPriority>
}
 800222a:	bf00      	nop
 800222c:	3718      	adds	r7, #24
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b082      	sub	sp, #8
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f7ff ffb0 	bl	80021a0 <SysTick_Config>
 8002240:	4603      	mov	r3, r0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
	...

0800224c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800224c:	b480      	push	{r7}
 800224e:	b089      	sub	sp, #36	; 0x24
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002256:	2300      	movs	r3, #0
 8002258:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800225a:	2300      	movs	r3, #0
 800225c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800225e:	2300      	movs	r3, #0
 8002260:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002262:	2300      	movs	r3, #0
 8002264:	61fb      	str	r3, [r7, #28]
 8002266:	e159      	b.n	800251c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002268:	2201      	movs	r2, #1
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	697a      	ldr	r2, [r7, #20]
 8002278:	4013      	ands	r3, r2
 800227a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	429a      	cmp	r2, r3
 8002282:	f040 8148 	bne.w	8002516 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f003 0303 	and.w	r3, r3, #3
 800228e:	2b01      	cmp	r3, #1
 8002290:	d005      	beq.n	800229e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800229a:	2b02      	cmp	r3, #2
 800229c:	d130      	bne.n	8002300 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	2203      	movs	r2, #3
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	43db      	mvns	r3, r3
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	4013      	ands	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	68da      	ldr	r2, [r3, #12]
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	fa02 f303 	lsl.w	r3, r2, r3
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022d4:	2201      	movs	r2, #1
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	43db      	mvns	r3, r3
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4013      	ands	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	091b      	lsrs	r3, r3, #4
 80022ea:	f003 0201 	and.w	r2, r3, #1
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f003 0303 	and.w	r3, r3, #3
 8002308:	2b03      	cmp	r3, #3
 800230a:	d017      	beq.n	800233c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	2203      	movs	r2, #3
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	43db      	mvns	r3, r3
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	4013      	ands	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	4313      	orrs	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f003 0303 	and.w	r3, r3, #3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d123      	bne.n	8002390 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	08da      	lsrs	r2, r3, #3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	3208      	adds	r2, #8
 8002350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002354:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	f003 0307 	and.w	r3, r3, #7
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	220f      	movs	r2, #15
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	43db      	mvns	r3, r3
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	4013      	ands	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	691a      	ldr	r2, [r3, #16]
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	f003 0307 	and.w	r3, r3, #7
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	4313      	orrs	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	08da      	lsrs	r2, r3, #3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	3208      	adds	r2, #8
 800238a:	69b9      	ldr	r1, [r7, #24]
 800238c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	2203      	movs	r2, #3
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	43db      	mvns	r3, r3
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	4013      	ands	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f003 0203 	and.w	r2, r3, #3
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 80a2 	beq.w	8002516 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023d2:	2300      	movs	r3, #0
 80023d4:	60fb      	str	r3, [r7, #12]
 80023d6:	4b57      	ldr	r3, [pc, #348]	; (8002534 <HAL_GPIO_Init+0x2e8>)
 80023d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023da:	4a56      	ldr	r2, [pc, #344]	; (8002534 <HAL_GPIO_Init+0x2e8>)
 80023dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023e0:	6453      	str	r3, [r2, #68]	; 0x44
 80023e2:	4b54      	ldr	r3, [pc, #336]	; (8002534 <HAL_GPIO_Init+0x2e8>)
 80023e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ea:	60fb      	str	r3, [r7, #12]
 80023ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023ee:	4a52      	ldr	r2, [pc, #328]	; (8002538 <HAL_GPIO_Init+0x2ec>)
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	089b      	lsrs	r3, r3, #2
 80023f4:	3302      	adds	r3, #2
 80023f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	f003 0303 	and.w	r3, r3, #3
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	220f      	movs	r2, #15
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	43db      	mvns	r3, r3
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	4013      	ands	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a49      	ldr	r2, [pc, #292]	; (800253c <HAL_GPIO_Init+0x2f0>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d019      	beq.n	800244e <HAL_GPIO_Init+0x202>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a48      	ldr	r2, [pc, #288]	; (8002540 <HAL_GPIO_Init+0x2f4>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d013      	beq.n	800244a <HAL_GPIO_Init+0x1fe>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a47      	ldr	r2, [pc, #284]	; (8002544 <HAL_GPIO_Init+0x2f8>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d00d      	beq.n	8002446 <HAL_GPIO_Init+0x1fa>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a46      	ldr	r2, [pc, #280]	; (8002548 <HAL_GPIO_Init+0x2fc>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d007      	beq.n	8002442 <HAL_GPIO_Init+0x1f6>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a45      	ldr	r2, [pc, #276]	; (800254c <HAL_GPIO_Init+0x300>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d101      	bne.n	800243e <HAL_GPIO_Init+0x1f2>
 800243a:	2304      	movs	r3, #4
 800243c:	e008      	b.n	8002450 <HAL_GPIO_Init+0x204>
 800243e:	2307      	movs	r3, #7
 8002440:	e006      	b.n	8002450 <HAL_GPIO_Init+0x204>
 8002442:	2303      	movs	r3, #3
 8002444:	e004      	b.n	8002450 <HAL_GPIO_Init+0x204>
 8002446:	2302      	movs	r3, #2
 8002448:	e002      	b.n	8002450 <HAL_GPIO_Init+0x204>
 800244a:	2301      	movs	r3, #1
 800244c:	e000      	b.n	8002450 <HAL_GPIO_Init+0x204>
 800244e:	2300      	movs	r3, #0
 8002450:	69fa      	ldr	r2, [r7, #28]
 8002452:	f002 0203 	and.w	r2, r2, #3
 8002456:	0092      	lsls	r2, r2, #2
 8002458:	4093      	lsls	r3, r2
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	4313      	orrs	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002460:	4935      	ldr	r1, [pc, #212]	; (8002538 <HAL_GPIO_Init+0x2ec>)
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	089b      	lsrs	r3, r3, #2
 8002466:	3302      	adds	r3, #2
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800246e:	4b38      	ldr	r3, [pc, #224]	; (8002550 <HAL_GPIO_Init+0x304>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	43db      	mvns	r3, r3
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	4013      	ands	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	4313      	orrs	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002492:	4a2f      	ldr	r2, [pc, #188]	; (8002550 <HAL_GPIO_Init+0x304>)
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002498:	4b2d      	ldr	r3, [pc, #180]	; (8002550 <HAL_GPIO_Init+0x304>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	43db      	mvns	r3, r3
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	4013      	ands	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d003      	beq.n	80024bc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024bc:	4a24      	ldr	r2, [pc, #144]	; (8002550 <HAL_GPIO_Init+0x304>)
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024c2:	4b23      	ldr	r3, [pc, #140]	; (8002550 <HAL_GPIO_Init+0x304>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	43db      	mvns	r3, r3
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	4013      	ands	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024e6:	4a1a      	ldr	r2, [pc, #104]	; (8002550 <HAL_GPIO_Init+0x304>)
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024ec:	4b18      	ldr	r3, [pc, #96]	; (8002550 <HAL_GPIO_Init+0x304>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	43db      	mvns	r3, r3
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	4013      	ands	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d003      	beq.n	8002510 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	4313      	orrs	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002510:	4a0f      	ldr	r2, [pc, #60]	; (8002550 <HAL_GPIO_Init+0x304>)
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	3301      	adds	r3, #1
 800251a:	61fb      	str	r3, [r7, #28]
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	2b0f      	cmp	r3, #15
 8002520:	f67f aea2 	bls.w	8002268 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002524:	bf00      	nop
 8002526:	bf00      	nop
 8002528:	3724      	adds	r7, #36	; 0x24
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	40023800 	.word	0x40023800
 8002538:	40013800 	.word	0x40013800
 800253c:	40020000 	.word	0x40020000
 8002540:	40020400 	.word	0x40020400
 8002544:	40020800 	.word	0x40020800
 8002548:	40020c00 	.word	0x40020c00
 800254c:	40021000 	.word	0x40021000
 8002550:	40013c00 	.word	0x40013c00

08002554 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	460b      	mov	r3, r1
 800255e:	807b      	strh	r3, [r7, #2]
 8002560:	4613      	mov	r3, r2
 8002562:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002564:	787b      	ldrb	r3, [r7, #1]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d003      	beq.n	8002572 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800256a:	887a      	ldrh	r2, [r7, #2]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002570:	e003      	b.n	800257a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002572:	887b      	ldrh	r3, [r7, #2]
 8002574:	041a      	lsls	r2, r3, #16
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	619a      	str	r2, [r3, #24]
}
 800257a:	bf00      	nop
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
	...

08002588 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b086      	sub	sp, #24
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e267      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d075      	beq.n	8002692 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025a6:	4b88      	ldr	r3, [pc, #544]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f003 030c 	and.w	r3, r3, #12
 80025ae:	2b04      	cmp	r3, #4
 80025b0:	d00c      	beq.n	80025cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025b2:	4b85      	ldr	r3, [pc, #532]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025ba:	2b08      	cmp	r3, #8
 80025bc:	d112      	bne.n	80025e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025be:	4b82      	ldr	r3, [pc, #520]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025ca:	d10b      	bne.n	80025e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025cc:	4b7e      	ldr	r3, [pc, #504]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d05b      	beq.n	8002690 <HAL_RCC_OscConfig+0x108>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d157      	bne.n	8002690 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e242      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ec:	d106      	bne.n	80025fc <HAL_RCC_OscConfig+0x74>
 80025ee:	4b76      	ldr	r3, [pc, #472]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a75      	ldr	r2, [pc, #468]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 80025f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025f8:	6013      	str	r3, [r2, #0]
 80025fa:	e01d      	b.n	8002638 <HAL_RCC_OscConfig+0xb0>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002604:	d10c      	bne.n	8002620 <HAL_RCC_OscConfig+0x98>
 8002606:	4b70      	ldr	r3, [pc, #448]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a6f      	ldr	r2, [pc, #444]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 800260c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002610:	6013      	str	r3, [r2, #0]
 8002612:	4b6d      	ldr	r3, [pc, #436]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a6c      	ldr	r2, [pc, #432]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 8002618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800261c:	6013      	str	r3, [r2, #0]
 800261e:	e00b      	b.n	8002638 <HAL_RCC_OscConfig+0xb0>
 8002620:	4b69      	ldr	r3, [pc, #420]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a68      	ldr	r2, [pc, #416]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 8002626:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800262a:	6013      	str	r3, [r2, #0]
 800262c:	4b66      	ldr	r3, [pc, #408]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a65      	ldr	r2, [pc, #404]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 8002632:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002636:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d013      	beq.n	8002668 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002640:	f7ff f90c 	bl	800185c <HAL_GetTick>
 8002644:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002646:	e008      	b.n	800265a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002648:	f7ff f908 	bl	800185c <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b64      	cmp	r3, #100	; 0x64
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e207      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800265a:	4b5b      	ldr	r3, [pc, #364]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d0f0      	beq.n	8002648 <HAL_RCC_OscConfig+0xc0>
 8002666:	e014      	b.n	8002692 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002668:	f7ff f8f8 	bl	800185c <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002670:	f7ff f8f4 	bl	800185c <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b64      	cmp	r3, #100	; 0x64
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e1f3      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002682:	4b51      	ldr	r3, [pc, #324]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1f0      	bne.n	8002670 <HAL_RCC_OscConfig+0xe8>
 800268e:	e000      	b.n	8002692 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002690:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d063      	beq.n	8002766 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800269e:	4b4a      	ldr	r3, [pc, #296]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f003 030c 	and.w	r3, r3, #12
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00b      	beq.n	80026c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026aa:	4b47      	ldr	r3, [pc, #284]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026b2:	2b08      	cmp	r3, #8
 80026b4:	d11c      	bne.n	80026f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026b6:	4b44      	ldr	r3, [pc, #272]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d116      	bne.n	80026f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026c2:	4b41      	ldr	r3, [pc, #260]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d005      	beq.n	80026da <HAL_RCC_OscConfig+0x152>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d001      	beq.n	80026da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e1c7      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026da:	4b3b      	ldr	r3, [pc, #236]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	4937      	ldr	r1, [pc, #220]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ee:	e03a      	b.n	8002766 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d020      	beq.n	800273a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026f8:	4b34      	ldr	r3, [pc, #208]	; (80027cc <HAL_RCC_OscConfig+0x244>)
 80026fa:	2201      	movs	r2, #1
 80026fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026fe:	f7ff f8ad 	bl	800185c <HAL_GetTick>
 8002702:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002704:	e008      	b.n	8002718 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002706:	f7ff f8a9 	bl	800185c <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	2b02      	cmp	r3, #2
 8002712:	d901      	bls.n	8002718 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e1a8      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002718:	4b2b      	ldr	r3, [pc, #172]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d0f0      	beq.n	8002706 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002724:	4b28      	ldr	r3, [pc, #160]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	691b      	ldr	r3, [r3, #16]
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	4925      	ldr	r1, [pc, #148]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 8002734:	4313      	orrs	r3, r2
 8002736:	600b      	str	r3, [r1, #0]
 8002738:	e015      	b.n	8002766 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800273a:	4b24      	ldr	r3, [pc, #144]	; (80027cc <HAL_RCC_OscConfig+0x244>)
 800273c:	2200      	movs	r2, #0
 800273e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002740:	f7ff f88c 	bl	800185c <HAL_GetTick>
 8002744:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002746:	e008      	b.n	800275a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002748:	f7ff f888 	bl	800185c <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b02      	cmp	r3, #2
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e187      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800275a:	4b1b      	ldr	r3, [pc, #108]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1f0      	bne.n	8002748 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0308 	and.w	r3, r3, #8
 800276e:	2b00      	cmp	r3, #0
 8002770:	d036      	beq.n	80027e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d016      	beq.n	80027a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800277a:	4b15      	ldr	r3, [pc, #84]	; (80027d0 <HAL_RCC_OscConfig+0x248>)
 800277c:	2201      	movs	r2, #1
 800277e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002780:	f7ff f86c 	bl	800185c <HAL_GetTick>
 8002784:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002786:	e008      	b.n	800279a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002788:	f7ff f868 	bl	800185c <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e167      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800279a:	4b0b      	ldr	r3, [pc, #44]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 800279c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d0f0      	beq.n	8002788 <HAL_RCC_OscConfig+0x200>
 80027a6:	e01b      	b.n	80027e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027a8:	4b09      	ldr	r3, [pc, #36]	; (80027d0 <HAL_RCC_OscConfig+0x248>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ae:	f7ff f855 	bl	800185c <HAL_GetTick>
 80027b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027b4:	e00e      	b.n	80027d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027b6:	f7ff f851 	bl	800185c <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d907      	bls.n	80027d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e150      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
 80027c8:	40023800 	.word	0x40023800
 80027cc:	42470000 	.word	0x42470000
 80027d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027d4:	4b88      	ldr	r3, [pc, #544]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 80027d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1ea      	bne.n	80027b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0304 	and.w	r3, r3, #4
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f000 8097 	beq.w	800291c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ee:	2300      	movs	r3, #0
 80027f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027f2:	4b81      	ldr	r3, [pc, #516]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 80027f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10f      	bne.n	800281e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027fe:	2300      	movs	r3, #0
 8002800:	60bb      	str	r3, [r7, #8]
 8002802:	4b7d      	ldr	r3, [pc, #500]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	4a7c      	ldr	r2, [pc, #496]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 8002808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800280c:	6413      	str	r3, [r2, #64]	; 0x40
 800280e:	4b7a      	ldr	r3, [pc, #488]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002816:	60bb      	str	r3, [r7, #8]
 8002818:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800281a:	2301      	movs	r3, #1
 800281c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800281e:	4b77      	ldr	r3, [pc, #476]	; (80029fc <HAL_RCC_OscConfig+0x474>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002826:	2b00      	cmp	r3, #0
 8002828:	d118      	bne.n	800285c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800282a:	4b74      	ldr	r3, [pc, #464]	; (80029fc <HAL_RCC_OscConfig+0x474>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a73      	ldr	r2, [pc, #460]	; (80029fc <HAL_RCC_OscConfig+0x474>)
 8002830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002834:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002836:	f7ff f811 	bl	800185c <HAL_GetTick>
 800283a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800283c:	e008      	b.n	8002850 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800283e:	f7ff f80d 	bl	800185c <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d901      	bls.n	8002850 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e10c      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002850:	4b6a      	ldr	r3, [pc, #424]	; (80029fc <HAL_RCC_OscConfig+0x474>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002858:	2b00      	cmp	r3, #0
 800285a:	d0f0      	beq.n	800283e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d106      	bne.n	8002872 <HAL_RCC_OscConfig+0x2ea>
 8002864:	4b64      	ldr	r3, [pc, #400]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 8002866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002868:	4a63      	ldr	r2, [pc, #396]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 800286a:	f043 0301 	orr.w	r3, r3, #1
 800286e:	6713      	str	r3, [r2, #112]	; 0x70
 8002870:	e01c      	b.n	80028ac <HAL_RCC_OscConfig+0x324>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	2b05      	cmp	r3, #5
 8002878:	d10c      	bne.n	8002894 <HAL_RCC_OscConfig+0x30c>
 800287a:	4b5f      	ldr	r3, [pc, #380]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 800287c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800287e:	4a5e      	ldr	r2, [pc, #376]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 8002880:	f043 0304 	orr.w	r3, r3, #4
 8002884:	6713      	str	r3, [r2, #112]	; 0x70
 8002886:	4b5c      	ldr	r3, [pc, #368]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 8002888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800288a:	4a5b      	ldr	r2, [pc, #364]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 800288c:	f043 0301 	orr.w	r3, r3, #1
 8002890:	6713      	str	r3, [r2, #112]	; 0x70
 8002892:	e00b      	b.n	80028ac <HAL_RCC_OscConfig+0x324>
 8002894:	4b58      	ldr	r3, [pc, #352]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 8002896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002898:	4a57      	ldr	r2, [pc, #348]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 800289a:	f023 0301 	bic.w	r3, r3, #1
 800289e:	6713      	str	r3, [r2, #112]	; 0x70
 80028a0:	4b55      	ldr	r3, [pc, #340]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 80028a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a4:	4a54      	ldr	r2, [pc, #336]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 80028a6:	f023 0304 	bic.w	r3, r3, #4
 80028aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d015      	beq.n	80028e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b4:	f7fe ffd2 	bl	800185c <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ba:	e00a      	b.n	80028d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028bc:	f7fe ffce 	bl	800185c <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e0cb      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d2:	4b49      	ldr	r3, [pc, #292]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 80028d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d0ee      	beq.n	80028bc <HAL_RCC_OscConfig+0x334>
 80028de:	e014      	b.n	800290a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028e0:	f7fe ffbc 	bl	800185c <HAL_GetTick>
 80028e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028e6:	e00a      	b.n	80028fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028e8:	f7fe ffb8 	bl	800185c <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e0b5      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028fe:	4b3e      	ldr	r3, [pc, #248]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 8002900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1ee      	bne.n	80028e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800290a:	7dfb      	ldrb	r3, [r7, #23]
 800290c:	2b01      	cmp	r3, #1
 800290e:	d105      	bne.n	800291c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002910:	4b39      	ldr	r3, [pc, #228]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 8002912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002914:	4a38      	ldr	r2, [pc, #224]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 8002916:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800291a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 80a1 	beq.w	8002a68 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002926:	4b34      	ldr	r3, [pc, #208]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 030c 	and.w	r3, r3, #12
 800292e:	2b08      	cmp	r3, #8
 8002930:	d05c      	beq.n	80029ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	2b02      	cmp	r3, #2
 8002938:	d141      	bne.n	80029be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800293a:	4b31      	ldr	r3, [pc, #196]	; (8002a00 <HAL_RCC_OscConfig+0x478>)
 800293c:	2200      	movs	r2, #0
 800293e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002940:	f7fe ff8c 	bl	800185c <HAL_GetTick>
 8002944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002948:	f7fe ff88 	bl	800185c <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b02      	cmp	r3, #2
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e087      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800295a:	4b27      	ldr	r3, [pc, #156]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1f0      	bne.n	8002948 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	69da      	ldr	r2, [r3, #28]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	431a      	orrs	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002974:	019b      	lsls	r3, r3, #6
 8002976:	431a      	orrs	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297c:	085b      	lsrs	r3, r3, #1
 800297e:	3b01      	subs	r3, #1
 8002980:	041b      	lsls	r3, r3, #16
 8002982:	431a      	orrs	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002988:	061b      	lsls	r3, r3, #24
 800298a:	491b      	ldr	r1, [pc, #108]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 800298c:	4313      	orrs	r3, r2
 800298e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002990:	4b1b      	ldr	r3, [pc, #108]	; (8002a00 <HAL_RCC_OscConfig+0x478>)
 8002992:	2201      	movs	r2, #1
 8002994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002996:	f7fe ff61 	bl	800185c <HAL_GetTick>
 800299a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800299c:	e008      	b.n	80029b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800299e:	f7fe ff5d 	bl	800185c <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d901      	bls.n	80029b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e05c      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029b0:	4b11      	ldr	r3, [pc, #68]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d0f0      	beq.n	800299e <HAL_RCC_OscConfig+0x416>
 80029bc:	e054      	b.n	8002a68 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029be:	4b10      	ldr	r3, [pc, #64]	; (8002a00 <HAL_RCC_OscConfig+0x478>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c4:	f7fe ff4a 	bl	800185c <HAL_GetTick>
 80029c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ca:	e008      	b.n	80029de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029cc:	f7fe ff46 	bl	800185c <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e045      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029de:	4b06      	ldr	r3, [pc, #24]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1f0      	bne.n	80029cc <HAL_RCC_OscConfig+0x444>
 80029ea:	e03d      	b.n	8002a68 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d107      	bne.n	8002a04 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e038      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
 80029f8:	40023800 	.word	0x40023800
 80029fc:	40007000 	.word	0x40007000
 8002a00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a04:	4b1b      	ldr	r3, [pc, #108]	; (8002a74 <HAL_RCC_OscConfig+0x4ec>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d028      	beq.n	8002a64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d121      	bne.n	8002a64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d11a      	bne.n	8002a64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a34:	4013      	ands	r3, r2
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d111      	bne.n	8002a64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a4a:	085b      	lsrs	r3, r3, #1
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d107      	bne.n	8002a64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d001      	beq.n	8002a68 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e000      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3718      	adds	r7, #24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	40023800 	.word	0x40023800

08002a78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d101      	bne.n	8002a8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e0cc      	b.n	8002c26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a8c:	4b68      	ldr	r3, [pc, #416]	; (8002c30 <HAL_RCC_ClockConfig+0x1b8>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0307 	and.w	r3, r3, #7
 8002a94:	683a      	ldr	r2, [r7, #0]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d90c      	bls.n	8002ab4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a9a:	4b65      	ldr	r3, [pc, #404]	; (8002c30 <HAL_RCC_ClockConfig+0x1b8>)
 8002a9c:	683a      	ldr	r2, [r7, #0]
 8002a9e:	b2d2      	uxtb	r2, r2
 8002aa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aa2:	4b63      	ldr	r3, [pc, #396]	; (8002c30 <HAL_RCC_ClockConfig+0x1b8>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0307 	and.w	r3, r3, #7
 8002aaa:	683a      	ldr	r2, [r7, #0]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d001      	beq.n	8002ab4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e0b8      	b.n	8002c26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d020      	beq.n	8002b02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0304 	and.w	r3, r3, #4
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d005      	beq.n	8002ad8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002acc:	4b59      	ldr	r3, [pc, #356]	; (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	4a58      	ldr	r2, [pc, #352]	; (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ad6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0308 	and.w	r3, r3, #8
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d005      	beq.n	8002af0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ae4:	4b53      	ldr	r3, [pc, #332]	; (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	4a52      	ldr	r2, [pc, #328]	; (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002aea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002aee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002af0:	4b50      	ldr	r3, [pc, #320]	; (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	494d      	ldr	r1, [pc, #308]	; (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d044      	beq.n	8002b98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d107      	bne.n	8002b26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b16:	4b47      	ldr	r3, [pc, #284]	; (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d119      	bne.n	8002b56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e07f      	b.n	8002c26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d003      	beq.n	8002b36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b32:	2b03      	cmp	r3, #3
 8002b34:	d107      	bne.n	8002b46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b36:	4b3f      	ldr	r3, [pc, #252]	; (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d109      	bne.n	8002b56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e06f      	b.n	8002c26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b46:	4b3b      	ldr	r3, [pc, #236]	; (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d101      	bne.n	8002b56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e067      	b.n	8002c26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b56:	4b37      	ldr	r3, [pc, #220]	; (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f023 0203 	bic.w	r2, r3, #3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	4934      	ldr	r1, [pc, #208]	; (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b68:	f7fe fe78 	bl	800185c <HAL_GetTick>
 8002b6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b6e:	e00a      	b.n	8002b86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b70:	f7fe fe74 	bl	800185c <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e04f      	b.n	8002c26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b86:	4b2b      	ldr	r3, [pc, #172]	; (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f003 020c 	and.w	r2, r3, #12
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d1eb      	bne.n	8002b70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b98:	4b25      	ldr	r3, [pc, #148]	; (8002c30 <HAL_RCC_ClockConfig+0x1b8>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0307 	and.w	r3, r3, #7
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d20c      	bcs.n	8002bc0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ba6:	4b22      	ldr	r3, [pc, #136]	; (8002c30 <HAL_RCC_ClockConfig+0x1b8>)
 8002ba8:	683a      	ldr	r2, [r7, #0]
 8002baa:	b2d2      	uxtb	r2, r2
 8002bac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bae:	4b20      	ldr	r3, [pc, #128]	; (8002c30 <HAL_RCC_ClockConfig+0x1b8>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0307 	and.w	r3, r3, #7
 8002bb6:	683a      	ldr	r2, [r7, #0]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d001      	beq.n	8002bc0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e032      	b.n	8002c26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0304 	and.w	r3, r3, #4
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d008      	beq.n	8002bde <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bcc:	4b19      	ldr	r3, [pc, #100]	; (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	4916      	ldr	r1, [pc, #88]	; (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0308 	and.w	r3, r3, #8
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d009      	beq.n	8002bfe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bea:	4b12      	ldr	r3, [pc, #72]	; (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	490e      	ldr	r1, [pc, #56]	; (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bfe:	f000 f821 	bl	8002c44 <HAL_RCC_GetSysClockFreq>
 8002c02:	4602      	mov	r2, r0
 8002c04:	4b0b      	ldr	r3, [pc, #44]	; (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	091b      	lsrs	r3, r3, #4
 8002c0a:	f003 030f 	and.w	r3, r3, #15
 8002c0e:	490a      	ldr	r1, [pc, #40]	; (8002c38 <HAL_RCC_ClockConfig+0x1c0>)
 8002c10:	5ccb      	ldrb	r3, [r1, r3]
 8002c12:	fa22 f303 	lsr.w	r3, r2, r3
 8002c16:	4a09      	ldr	r2, [pc, #36]	; (8002c3c <HAL_RCC_ClockConfig+0x1c4>)
 8002c18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c1a:	4b09      	ldr	r3, [pc, #36]	; (8002c40 <HAL_RCC_ClockConfig+0x1c8>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7fe fdd8 	bl	80017d4 <HAL_InitTick>

  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	40023c00 	.word	0x40023c00
 8002c34:	40023800 	.word	0x40023800
 8002c38:	080043f4 	.word	0x080043f4
 8002c3c:	20000000 	.word	0x20000000
 8002c40:	20000004 	.word	0x20000004

08002c44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c48:	b094      	sub	sp, #80	; 0x50
 8002c4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	647b      	str	r3, [r7, #68]	; 0x44
 8002c50:	2300      	movs	r3, #0
 8002c52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c54:	2300      	movs	r3, #0
 8002c56:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c5c:	4b79      	ldr	r3, [pc, #484]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f003 030c 	and.w	r3, r3, #12
 8002c64:	2b08      	cmp	r3, #8
 8002c66:	d00d      	beq.n	8002c84 <HAL_RCC_GetSysClockFreq+0x40>
 8002c68:	2b08      	cmp	r3, #8
 8002c6a:	f200 80e1 	bhi.w	8002e30 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d002      	beq.n	8002c78 <HAL_RCC_GetSysClockFreq+0x34>
 8002c72:	2b04      	cmp	r3, #4
 8002c74:	d003      	beq.n	8002c7e <HAL_RCC_GetSysClockFreq+0x3a>
 8002c76:	e0db      	b.n	8002e30 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c78:	4b73      	ldr	r3, [pc, #460]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c7a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002c7c:	e0db      	b.n	8002e36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c7e:	4b73      	ldr	r3, [pc, #460]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x208>)
 8002c80:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c82:	e0d8      	b.n	8002e36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c84:	4b6f      	ldr	r3, [pc, #444]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c8c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c8e:	4b6d      	ldr	r3, [pc, #436]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d063      	beq.n	8002d62 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c9a:	4b6a      	ldr	r3, [pc, #424]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	099b      	lsrs	r3, r3, #6
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ca4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ca8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cac:	633b      	str	r3, [r7, #48]	; 0x30
 8002cae:	2300      	movs	r3, #0
 8002cb0:	637b      	str	r3, [r7, #52]	; 0x34
 8002cb2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002cb6:	4622      	mov	r2, r4
 8002cb8:	462b      	mov	r3, r5
 8002cba:	f04f 0000 	mov.w	r0, #0
 8002cbe:	f04f 0100 	mov.w	r1, #0
 8002cc2:	0159      	lsls	r1, r3, #5
 8002cc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cc8:	0150      	lsls	r0, r2, #5
 8002cca:	4602      	mov	r2, r0
 8002ccc:	460b      	mov	r3, r1
 8002cce:	4621      	mov	r1, r4
 8002cd0:	1a51      	subs	r1, r2, r1
 8002cd2:	6139      	str	r1, [r7, #16]
 8002cd4:	4629      	mov	r1, r5
 8002cd6:	eb63 0301 	sbc.w	r3, r3, r1
 8002cda:	617b      	str	r3, [r7, #20]
 8002cdc:	f04f 0200 	mov.w	r2, #0
 8002ce0:	f04f 0300 	mov.w	r3, #0
 8002ce4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ce8:	4659      	mov	r1, fp
 8002cea:	018b      	lsls	r3, r1, #6
 8002cec:	4651      	mov	r1, sl
 8002cee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cf2:	4651      	mov	r1, sl
 8002cf4:	018a      	lsls	r2, r1, #6
 8002cf6:	4651      	mov	r1, sl
 8002cf8:	ebb2 0801 	subs.w	r8, r2, r1
 8002cfc:	4659      	mov	r1, fp
 8002cfe:	eb63 0901 	sbc.w	r9, r3, r1
 8002d02:	f04f 0200 	mov.w	r2, #0
 8002d06:	f04f 0300 	mov.w	r3, #0
 8002d0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d16:	4690      	mov	r8, r2
 8002d18:	4699      	mov	r9, r3
 8002d1a:	4623      	mov	r3, r4
 8002d1c:	eb18 0303 	adds.w	r3, r8, r3
 8002d20:	60bb      	str	r3, [r7, #8]
 8002d22:	462b      	mov	r3, r5
 8002d24:	eb49 0303 	adc.w	r3, r9, r3
 8002d28:	60fb      	str	r3, [r7, #12]
 8002d2a:	f04f 0200 	mov.w	r2, #0
 8002d2e:	f04f 0300 	mov.w	r3, #0
 8002d32:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d36:	4629      	mov	r1, r5
 8002d38:	024b      	lsls	r3, r1, #9
 8002d3a:	4621      	mov	r1, r4
 8002d3c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d40:	4621      	mov	r1, r4
 8002d42:	024a      	lsls	r2, r1, #9
 8002d44:	4610      	mov	r0, r2
 8002d46:	4619      	mov	r1, r3
 8002d48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d50:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d54:	f7fd fe92 	bl	8000a7c <__aeabi_uldivmod>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d60:	e058      	b.n	8002e14 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d62:	4b38      	ldr	r3, [pc, #224]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	099b      	lsrs	r3, r3, #6
 8002d68:	2200      	movs	r2, #0
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	4611      	mov	r1, r2
 8002d6e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d72:	623b      	str	r3, [r7, #32]
 8002d74:	2300      	movs	r3, #0
 8002d76:	627b      	str	r3, [r7, #36]	; 0x24
 8002d78:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d7c:	4642      	mov	r2, r8
 8002d7e:	464b      	mov	r3, r9
 8002d80:	f04f 0000 	mov.w	r0, #0
 8002d84:	f04f 0100 	mov.w	r1, #0
 8002d88:	0159      	lsls	r1, r3, #5
 8002d8a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d8e:	0150      	lsls	r0, r2, #5
 8002d90:	4602      	mov	r2, r0
 8002d92:	460b      	mov	r3, r1
 8002d94:	4641      	mov	r1, r8
 8002d96:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d9a:	4649      	mov	r1, r9
 8002d9c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002da0:	f04f 0200 	mov.w	r2, #0
 8002da4:	f04f 0300 	mov.w	r3, #0
 8002da8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002dac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002db0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002db4:	ebb2 040a 	subs.w	r4, r2, sl
 8002db8:	eb63 050b 	sbc.w	r5, r3, fp
 8002dbc:	f04f 0200 	mov.w	r2, #0
 8002dc0:	f04f 0300 	mov.w	r3, #0
 8002dc4:	00eb      	lsls	r3, r5, #3
 8002dc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002dca:	00e2      	lsls	r2, r4, #3
 8002dcc:	4614      	mov	r4, r2
 8002dce:	461d      	mov	r5, r3
 8002dd0:	4643      	mov	r3, r8
 8002dd2:	18e3      	adds	r3, r4, r3
 8002dd4:	603b      	str	r3, [r7, #0]
 8002dd6:	464b      	mov	r3, r9
 8002dd8:	eb45 0303 	adc.w	r3, r5, r3
 8002ddc:	607b      	str	r3, [r7, #4]
 8002dde:	f04f 0200 	mov.w	r2, #0
 8002de2:	f04f 0300 	mov.w	r3, #0
 8002de6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dea:	4629      	mov	r1, r5
 8002dec:	028b      	lsls	r3, r1, #10
 8002dee:	4621      	mov	r1, r4
 8002df0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002df4:	4621      	mov	r1, r4
 8002df6:	028a      	lsls	r2, r1, #10
 8002df8:	4610      	mov	r0, r2
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dfe:	2200      	movs	r2, #0
 8002e00:	61bb      	str	r3, [r7, #24]
 8002e02:	61fa      	str	r2, [r7, #28]
 8002e04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e08:	f7fd fe38 	bl	8000a7c <__aeabi_uldivmod>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	460b      	mov	r3, r1
 8002e10:	4613      	mov	r3, r2
 8002e12:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e14:	4b0b      	ldr	r3, [pc, #44]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	0c1b      	lsrs	r3, r3, #16
 8002e1a:	f003 0303 	and.w	r3, r3, #3
 8002e1e:	3301      	adds	r3, #1
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002e24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e2c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e2e:	e002      	b.n	8002e36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e30:	4b05      	ldr	r3, [pc, #20]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e32:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3750      	adds	r7, #80	; 0x50
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e42:	bf00      	nop
 8002e44:	40023800 	.word	0x40023800
 8002e48:	00f42400 	.word	0x00f42400
 8002e4c:	007a1200 	.word	0x007a1200

08002e50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e54:	4b03      	ldr	r3, [pc, #12]	; (8002e64 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e56:	681b      	ldr	r3, [r3, #0]
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	20000000 	.word	0x20000000

08002e68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e6c:	f7ff fff0 	bl	8002e50 <HAL_RCC_GetHCLKFreq>
 8002e70:	4602      	mov	r2, r0
 8002e72:	4b05      	ldr	r3, [pc, #20]	; (8002e88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	0a9b      	lsrs	r3, r3, #10
 8002e78:	f003 0307 	and.w	r3, r3, #7
 8002e7c:	4903      	ldr	r1, [pc, #12]	; (8002e8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e7e:	5ccb      	ldrb	r3, [r1, r3]
 8002e80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	40023800 	.word	0x40023800
 8002e8c:	08004404 	.word	0x08004404

08002e90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e94:	f7ff ffdc 	bl	8002e50 <HAL_RCC_GetHCLKFreq>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	4b05      	ldr	r3, [pc, #20]	; (8002eb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	0b5b      	lsrs	r3, r3, #13
 8002ea0:	f003 0307 	and.w	r3, r3, #7
 8002ea4:	4903      	ldr	r1, [pc, #12]	; (8002eb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ea6:	5ccb      	ldrb	r3, [r1, r3]
 8002ea8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	40023800 	.word	0x40023800
 8002eb4:	08004404 	.word	0x08004404

08002eb8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e07b      	b.n	8002fc2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d108      	bne.n	8002ee4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002eda:	d009      	beq.n	8002ef0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	61da      	str	r2, [r3, #28]
 8002ee2:	e005      	b.n	8002ef0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d106      	bne.n	8002f10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f7fe faf4 	bl	80014f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2202      	movs	r2, #2
 8002f14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f26:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002f38:	431a      	orrs	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f42:	431a      	orrs	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	f003 0302 	and.w	r3, r3, #2
 8002f4c:	431a      	orrs	r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	431a      	orrs	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f60:	431a      	orrs	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	69db      	ldr	r3, [r3, #28]
 8002f66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f6a:	431a      	orrs	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a1b      	ldr	r3, [r3, #32]
 8002f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f74:	ea42 0103 	orr.w	r1, r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f7c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	0c1b      	lsrs	r3, r3, #16
 8002f8e:	f003 0104 	and.w	r1, r3, #4
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f96:	f003 0210 	and.w	r2, r3, #16
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	69da      	ldr	r2, [r3, #28]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fb0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b082      	sub	sp, #8
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d101      	bne.n	8002fdc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e03f      	b.n	800305c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d106      	bne.n	8002ff6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f7fe fae9 	bl	80015c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2224      	movs	r2, #36	; 0x24
 8002ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68da      	ldr	r2, [r3, #12]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800300c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 f928 	bl	8003264 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	691a      	ldr	r2, [r3, #16]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003022:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	695a      	ldr	r2, [r3, #20]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003032:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68da      	ldr	r2, [r3, #12]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003042:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2220      	movs	r2, #32
 800304e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2220      	movs	r2, #32
 8003056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800305a:	2300      	movs	r3, #0
}
 800305c:	4618      	mov	r0, r3
 800305e:	3708      	adds	r7, #8
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b08a      	sub	sp, #40	; 0x28
 8003068:	af02      	add	r7, sp, #8
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	603b      	str	r3, [r7, #0]
 8003070:	4613      	mov	r3, r2
 8003072:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003074:	2300      	movs	r3, #0
 8003076:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800307e:	b2db      	uxtb	r3, r3
 8003080:	2b20      	cmp	r3, #32
 8003082:	d17c      	bne.n	800317e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d002      	beq.n	8003090 <HAL_UART_Transmit+0x2c>
 800308a:	88fb      	ldrh	r3, [r7, #6]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d101      	bne.n	8003094 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e075      	b.n	8003180 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800309a:	2b01      	cmp	r3, #1
 800309c:	d101      	bne.n	80030a2 <HAL_UART_Transmit+0x3e>
 800309e:	2302      	movs	r3, #2
 80030a0:	e06e      	b.n	8003180 <HAL_UART_Transmit+0x11c>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2201      	movs	r2, #1
 80030a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2221      	movs	r2, #33	; 0x21
 80030b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030b8:	f7fe fbd0 	bl	800185c <HAL_GetTick>
 80030bc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	88fa      	ldrh	r2, [r7, #6]
 80030c2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	88fa      	ldrh	r2, [r7, #6]
 80030c8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030d2:	d108      	bne.n	80030e6 <HAL_UART_Transmit+0x82>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d104      	bne.n	80030e6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80030dc:	2300      	movs	r3, #0
 80030de:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	61bb      	str	r3, [r7, #24]
 80030e4:	e003      	b.n	80030ee <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030ea:	2300      	movs	r3, #0
 80030ec:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80030f6:	e02a      	b.n	800314e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	9300      	str	r3, [sp, #0]
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	2200      	movs	r2, #0
 8003100:	2180      	movs	r1, #128	; 0x80
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f000 f840 	bl	8003188 <UART_WaitOnFlagUntilTimeout>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e036      	b.n	8003180 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d10b      	bne.n	8003130 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	881b      	ldrh	r3, [r3, #0]
 800311c:	461a      	mov	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003126:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	3302      	adds	r3, #2
 800312c:	61bb      	str	r3, [r7, #24]
 800312e:	e007      	b.n	8003140 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	781a      	ldrb	r2, [r3, #0]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	3301      	adds	r3, #1
 800313e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003144:	b29b      	uxth	r3, r3
 8003146:	3b01      	subs	r3, #1
 8003148:	b29a      	uxth	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003152:	b29b      	uxth	r3, r3
 8003154:	2b00      	cmp	r3, #0
 8003156:	d1cf      	bne.n	80030f8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	9300      	str	r3, [sp, #0]
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	2200      	movs	r2, #0
 8003160:	2140      	movs	r1, #64	; 0x40
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	f000 f810 	bl	8003188 <UART_WaitOnFlagUntilTimeout>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e006      	b.n	8003180 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2220      	movs	r2, #32
 8003176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800317a:	2300      	movs	r3, #0
 800317c:	e000      	b.n	8003180 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800317e:	2302      	movs	r3, #2
  }
}
 8003180:	4618      	mov	r0, r3
 8003182:	3720      	adds	r7, #32
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b090      	sub	sp, #64	; 0x40
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	603b      	str	r3, [r7, #0]
 8003194:	4613      	mov	r3, r2
 8003196:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003198:	e050      	b.n	800323c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800319a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800319c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a0:	d04c      	beq.n	800323c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80031a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d007      	beq.n	80031b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80031a8:	f7fe fb58 	bl	800185c <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d241      	bcs.n	800323c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	330c      	adds	r3, #12
 80031be:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c2:	e853 3f00 	ldrex	r3, [r3]
 80031c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80031c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80031ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	330c      	adds	r3, #12
 80031d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031d8:	637a      	str	r2, [r7, #52]	; 0x34
 80031da:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80031de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031e0:	e841 2300 	strex	r3, r2, [r1]
 80031e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80031e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1e5      	bne.n	80031b8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	3314      	adds	r3, #20
 80031f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	e853 3f00 	ldrex	r3, [r3]
 80031fa:	613b      	str	r3, [r7, #16]
   return(result);
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	f023 0301 	bic.w	r3, r3, #1
 8003202:	63bb      	str	r3, [r7, #56]	; 0x38
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	3314      	adds	r3, #20
 800320a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800320c:	623a      	str	r2, [r7, #32]
 800320e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003210:	69f9      	ldr	r1, [r7, #28]
 8003212:	6a3a      	ldr	r2, [r7, #32]
 8003214:	e841 2300 	strex	r3, r2, [r1]
 8003218:	61bb      	str	r3, [r7, #24]
   return(result);
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1e5      	bne.n	80031ec <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2220      	movs	r2, #32
 8003224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2220      	movs	r2, #32
 800322c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e00f      	b.n	800325c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	4013      	ands	r3, r2
 8003246:	68ba      	ldr	r2, [r7, #8]
 8003248:	429a      	cmp	r2, r3
 800324a:	bf0c      	ite	eq
 800324c:	2301      	moveq	r3, #1
 800324e:	2300      	movne	r3, #0
 8003250:	b2db      	uxtb	r3, r3
 8003252:	461a      	mov	r2, r3
 8003254:	79fb      	ldrb	r3, [r7, #7]
 8003256:	429a      	cmp	r2, r3
 8003258:	d09f      	beq.n	800319a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	3740      	adds	r7, #64	; 0x40
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003264:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003268:	b0c0      	sub	sp, #256	; 0x100
 800326a:	af00      	add	r7, sp, #0
 800326c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	691b      	ldr	r3, [r3, #16]
 8003278:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800327c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003280:	68d9      	ldr	r1, [r3, #12]
 8003282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	ea40 0301 	orr.w	r3, r0, r1
 800328c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800328e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003292:	689a      	ldr	r2, [r3, #8]
 8003294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	431a      	orrs	r2, r3
 800329c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	431a      	orrs	r2, r3
 80032a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032a8:	69db      	ldr	r3, [r3, #28]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80032b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80032bc:	f021 010c 	bic.w	r1, r1, #12
 80032c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80032ca:	430b      	orrs	r3, r1
 80032cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80032da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032de:	6999      	ldr	r1, [r3, #24]
 80032e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	ea40 0301 	orr.w	r3, r0, r1
 80032ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80032ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	4b8f      	ldr	r3, [pc, #572]	; (8003530 <UART_SetConfig+0x2cc>)
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d005      	beq.n	8003304 <UART_SetConfig+0xa0>
 80032f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	4b8d      	ldr	r3, [pc, #564]	; (8003534 <UART_SetConfig+0x2d0>)
 8003300:	429a      	cmp	r2, r3
 8003302:	d104      	bne.n	800330e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003304:	f7ff fdc4 	bl	8002e90 <HAL_RCC_GetPCLK2Freq>
 8003308:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800330c:	e003      	b.n	8003316 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800330e:	f7ff fdab 	bl	8002e68 <HAL_RCC_GetPCLK1Freq>
 8003312:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800331a:	69db      	ldr	r3, [r3, #28]
 800331c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003320:	f040 810c 	bne.w	800353c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003324:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003328:	2200      	movs	r2, #0
 800332a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800332e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003332:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003336:	4622      	mov	r2, r4
 8003338:	462b      	mov	r3, r5
 800333a:	1891      	adds	r1, r2, r2
 800333c:	65b9      	str	r1, [r7, #88]	; 0x58
 800333e:	415b      	adcs	r3, r3
 8003340:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003342:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003346:	4621      	mov	r1, r4
 8003348:	eb12 0801 	adds.w	r8, r2, r1
 800334c:	4629      	mov	r1, r5
 800334e:	eb43 0901 	adc.w	r9, r3, r1
 8003352:	f04f 0200 	mov.w	r2, #0
 8003356:	f04f 0300 	mov.w	r3, #0
 800335a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800335e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003362:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003366:	4690      	mov	r8, r2
 8003368:	4699      	mov	r9, r3
 800336a:	4623      	mov	r3, r4
 800336c:	eb18 0303 	adds.w	r3, r8, r3
 8003370:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003374:	462b      	mov	r3, r5
 8003376:	eb49 0303 	adc.w	r3, r9, r3
 800337a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800337e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800338a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800338e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003392:	460b      	mov	r3, r1
 8003394:	18db      	adds	r3, r3, r3
 8003396:	653b      	str	r3, [r7, #80]	; 0x50
 8003398:	4613      	mov	r3, r2
 800339a:	eb42 0303 	adc.w	r3, r2, r3
 800339e:	657b      	str	r3, [r7, #84]	; 0x54
 80033a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80033a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80033a8:	f7fd fb68 	bl	8000a7c <__aeabi_uldivmod>
 80033ac:	4602      	mov	r2, r0
 80033ae:	460b      	mov	r3, r1
 80033b0:	4b61      	ldr	r3, [pc, #388]	; (8003538 <UART_SetConfig+0x2d4>)
 80033b2:	fba3 2302 	umull	r2, r3, r3, r2
 80033b6:	095b      	lsrs	r3, r3, #5
 80033b8:	011c      	lsls	r4, r3, #4
 80033ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033be:	2200      	movs	r2, #0
 80033c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80033c4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80033c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80033cc:	4642      	mov	r2, r8
 80033ce:	464b      	mov	r3, r9
 80033d0:	1891      	adds	r1, r2, r2
 80033d2:	64b9      	str	r1, [r7, #72]	; 0x48
 80033d4:	415b      	adcs	r3, r3
 80033d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80033dc:	4641      	mov	r1, r8
 80033de:	eb12 0a01 	adds.w	sl, r2, r1
 80033e2:	4649      	mov	r1, r9
 80033e4:	eb43 0b01 	adc.w	fp, r3, r1
 80033e8:	f04f 0200 	mov.w	r2, #0
 80033ec:	f04f 0300 	mov.w	r3, #0
 80033f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80033f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80033f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033fc:	4692      	mov	sl, r2
 80033fe:	469b      	mov	fp, r3
 8003400:	4643      	mov	r3, r8
 8003402:	eb1a 0303 	adds.w	r3, sl, r3
 8003406:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800340a:	464b      	mov	r3, r9
 800340c:	eb4b 0303 	adc.w	r3, fp, r3
 8003410:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003420:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003424:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003428:	460b      	mov	r3, r1
 800342a:	18db      	adds	r3, r3, r3
 800342c:	643b      	str	r3, [r7, #64]	; 0x40
 800342e:	4613      	mov	r3, r2
 8003430:	eb42 0303 	adc.w	r3, r2, r3
 8003434:	647b      	str	r3, [r7, #68]	; 0x44
 8003436:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800343a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800343e:	f7fd fb1d 	bl	8000a7c <__aeabi_uldivmod>
 8003442:	4602      	mov	r2, r0
 8003444:	460b      	mov	r3, r1
 8003446:	4611      	mov	r1, r2
 8003448:	4b3b      	ldr	r3, [pc, #236]	; (8003538 <UART_SetConfig+0x2d4>)
 800344a:	fba3 2301 	umull	r2, r3, r3, r1
 800344e:	095b      	lsrs	r3, r3, #5
 8003450:	2264      	movs	r2, #100	; 0x64
 8003452:	fb02 f303 	mul.w	r3, r2, r3
 8003456:	1acb      	subs	r3, r1, r3
 8003458:	00db      	lsls	r3, r3, #3
 800345a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800345e:	4b36      	ldr	r3, [pc, #216]	; (8003538 <UART_SetConfig+0x2d4>)
 8003460:	fba3 2302 	umull	r2, r3, r3, r2
 8003464:	095b      	lsrs	r3, r3, #5
 8003466:	005b      	lsls	r3, r3, #1
 8003468:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800346c:	441c      	add	r4, r3
 800346e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003472:	2200      	movs	r2, #0
 8003474:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003478:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800347c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003480:	4642      	mov	r2, r8
 8003482:	464b      	mov	r3, r9
 8003484:	1891      	adds	r1, r2, r2
 8003486:	63b9      	str	r1, [r7, #56]	; 0x38
 8003488:	415b      	adcs	r3, r3
 800348a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800348c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003490:	4641      	mov	r1, r8
 8003492:	1851      	adds	r1, r2, r1
 8003494:	6339      	str	r1, [r7, #48]	; 0x30
 8003496:	4649      	mov	r1, r9
 8003498:	414b      	adcs	r3, r1
 800349a:	637b      	str	r3, [r7, #52]	; 0x34
 800349c:	f04f 0200 	mov.w	r2, #0
 80034a0:	f04f 0300 	mov.w	r3, #0
 80034a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80034a8:	4659      	mov	r1, fp
 80034aa:	00cb      	lsls	r3, r1, #3
 80034ac:	4651      	mov	r1, sl
 80034ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034b2:	4651      	mov	r1, sl
 80034b4:	00ca      	lsls	r2, r1, #3
 80034b6:	4610      	mov	r0, r2
 80034b8:	4619      	mov	r1, r3
 80034ba:	4603      	mov	r3, r0
 80034bc:	4642      	mov	r2, r8
 80034be:	189b      	adds	r3, r3, r2
 80034c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80034c4:	464b      	mov	r3, r9
 80034c6:	460a      	mov	r2, r1
 80034c8:	eb42 0303 	adc.w	r3, r2, r3
 80034cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80034d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80034dc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80034e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80034e4:	460b      	mov	r3, r1
 80034e6:	18db      	adds	r3, r3, r3
 80034e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80034ea:	4613      	mov	r3, r2
 80034ec:	eb42 0303 	adc.w	r3, r2, r3
 80034f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80034fa:	f7fd fabf 	bl	8000a7c <__aeabi_uldivmod>
 80034fe:	4602      	mov	r2, r0
 8003500:	460b      	mov	r3, r1
 8003502:	4b0d      	ldr	r3, [pc, #52]	; (8003538 <UART_SetConfig+0x2d4>)
 8003504:	fba3 1302 	umull	r1, r3, r3, r2
 8003508:	095b      	lsrs	r3, r3, #5
 800350a:	2164      	movs	r1, #100	; 0x64
 800350c:	fb01 f303 	mul.w	r3, r1, r3
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	00db      	lsls	r3, r3, #3
 8003514:	3332      	adds	r3, #50	; 0x32
 8003516:	4a08      	ldr	r2, [pc, #32]	; (8003538 <UART_SetConfig+0x2d4>)
 8003518:	fba2 2303 	umull	r2, r3, r2, r3
 800351c:	095b      	lsrs	r3, r3, #5
 800351e:	f003 0207 	and.w	r2, r3, #7
 8003522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4422      	add	r2, r4
 800352a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800352c:	e105      	b.n	800373a <UART_SetConfig+0x4d6>
 800352e:	bf00      	nop
 8003530:	40011000 	.word	0x40011000
 8003534:	40011400 	.word	0x40011400
 8003538:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800353c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003540:	2200      	movs	r2, #0
 8003542:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003546:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800354a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800354e:	4642      	mov	r2, r8
 8003550:	464b      	mov	r3, r9
 8003552:	1891      	adds	r1, r2, r2
 8003554:	6239      	str	r1, [r7, #32]
 8003556:	415b      	adcs	r3, r3
 8003558:	627b      	str	r3, [r7, #36]	; 0x24
 800355a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800355e:	4641      	mov	r1, r8
 8003560:	1854      	adds	r4, r2, r1
 8003562:	4649      	mov	r1, r9
 8003564:	eb43 0501 	adc.w	r5, r3, r1
 8003568:	f04f 0200 	mov.w	r2, #0
 800356c:	f04f 0300 	mov.w	r3, #0
 8003570:	00eb      	lsls	r3, r5, #3
 8003572:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003576:	00e2      	lsls	r2, r4, #3
 8003578:	4614      	mov	r4, r2
 800357a:	461d      	mov	r5, r3
 800357c:	4643      	mov	r3, r8
 800357e:	18e3      	adds	r3, r4, r3
 8003580:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003584:	464b      	mov	r3, r9
 8003586:	eb45 0303 	adc.w	r3, r5, r3
 800358a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800358e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800359a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800359e:	f04f 0200 	mov.w	r2, #0
 80035a2:	f04f 0300 	mov.w	r3, #0
 80035a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80035aa:	4629      	mov	r1, r5
 80035ac:	008b      	lsls	r3, r1, #2
 80035ae:	4621      	mov	r1, r4
 80035b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035b4:	4621      	mov	r1, r4
 80035b6:	008a      	lsls	r2, r1, #2
 80035b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80035bc:	f7fd fa5e 	bl	8000a7c <__aeabi_uldivmod>
 80035c0:	4602      	mov	r2, r0
 80035c2:	460b      	mov	r3, r1
 80035c4:	4b60      	ldr	r3, [pc, #384]	; (8003748 <UART_SetConfig+0x4e4>)
 80035c6:	fba3 2302 	umull	r2, r3, r3, r2
 80035ca:	095b      	lsrs	r3, r3, #5
 80035cc:	011c      	lsls	r4, r3, #4
 80035ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035d2:	2200      	movs	r2, #0
 80035d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80035d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80035dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80035e0:	4642      	mov	r2, r8
 80035e2:	464b      	mov	r3, r9
 80035e4:	1891      	adds	r1, r2, r2
 80035e6:	61b9      	str	r1, [r7, #24]
 80035e8:	415b      	adcs	r3, r3
 80035ea:	61fb      	str	r3, [r7, #28]
 80035ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035f0:	4641      	mov	r1, r8
 80035f2:	1851      	adds	r1, r2, r1
 80035f4:	6139      	str	r1, [r7, #16]
 80035f6:	4649      	mov	r1, r9
 80035f8:	414b      	adcs	r3, r1
 80035fa:	617b      	str	r3, [r7, #20]
 80035fc:	f04f 0200 	mov.w	r2, #0
 8003600:	f04f 0300 	mov.w	r3, #0
 8003604:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003608:	4659      	mov	r1, fp
 800360a:	00cb      	lsls	r3, r1, #3
 800360c:	4651      	mov	r1, sl
 800360e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003612:	4651      	mov	r1, sl
 8003614:	00ca      	lsls	r2, r1, #3
 8003616:	4610      	mov	r0, r2
 8003618:	4619      	mov	r1, r3
 800361a:	4603      	mov	r3, r0
 800361c:	4642      	mov	r2, r8
 800361e:	189b      	adds	r3, r3, r2
 8003620:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003624:	464b      	mov	r3, r9
 8003626:	460a      	mov	r2, r1
 8003628:	eb42 0303 	adc.w	r3, r2, r3
 800362c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	67bb      	str	r3, [r7, #120]	; 0x78
 800363a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800363c:	f04f 0200 	mov.w	r2, #0
 8003640:	f04f 0300 	mov.w	r3, #0
 8003644:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003648:	4649      	mov	r1, r9
 800364a:	008b      	lsls	r3, r1, #2
 800364c:	4641      	mov	r1, r8
 800364e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003652:	4641      	mov	r1, r8
 8003654:	008a      	lsls	r2, r1, #2
 8003656:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800365a:	f7fd fa0f 	bl	8000a7c <__aeabi_uldivmod>
 800365e:	4602      	mov	r2, r0
 8003660:	460b      	mov	r3, r1
 8003662:	4b39      	ldr	r3, [pc, #228]	; (8003748 <UART_SetConfig+0x4e4>)
 8003664:	fba3 1302 	umull	r1, r3, r3, r2
 8003668:	095b      	lsrs	r3, r3, #5
 800366a:	2164      	movs	r1, #100	; 0x64
 800366c:	fb01 f303 	mul.w	r3, r1, r3
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	011b      	lsls	r3, r3, #4
 8003674:	3332      	adds	r3, #50	; 0x32
 8003676:	4a34      	ldr	r2, [pc, #208]	; (8003748 <UART_SetConfig+0x4e4>)
 8003678:	fba2 2303 	umull	r2, r3, r2, r3
 800367c:	095b      	lsrs	r3, r3, #5
 800367e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003682:	441c      	add	r4, r3
 8003684:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003688:	2200      	movs	r2, #0
 800368a:	673b      	str	r3, [r7, #112]	; 0x70
 800368c:	677a      	str	r2, [r7, #116]	; 0x74
 800368e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003692:	4642      	mov	r2, r8
 8003694:	464b      	mov	r3, r9
 8003696:	1891      	adds	r1, r2, r2
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	415b      	adcs	r3, r3
 800369c:	60fb      	str	r3, [r7, #12]
 800369e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036a2:	4641      	mov	r1, r8
 80036a4:	1851      	adds	r1, r2, r1
 80036a6:	6039      	str	r1, [r7, #0]
 80036a8:	4649      	mov	r1, r9
 80036aa:	414b      	adcs	r3, r1
 80036ac:	607b      	str	r3, [r7, #4]
 80036ae:	f04f 0200 	mov.w	r2, #0
 80036b2:	f04f 0300 	mov.w	r3, #0
 80036b6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80036ba:	4659      	mov	r1, fp
 80036bc:	00cb      	lsls	r3, r1, #3
 80036be:	4651      	mov	r1, sl
 80036c0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036c4:	4651      	mov	r1, sl
 80036c6:	00ca      	lsls	r2, r1, #3
 80036c8:	4610      	mov	r0, r2
 80036ca:	4619      	mov	r1, r3
 80036cc:	4603      	mov	r3, r0
 80036ce:	4642      	mov	r2, r8
 80036d0:	189b      	adds	r3, r3, r2
 80036d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80036d4:	464b      	mov	r3, r9
 80036d6:	460a      	mov	r2, r1
 80036d8:	eb42 0303 	adc.w	r3, r2, r3
 80036dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	663b      	str	r3, [r7, #96]	; 0x60
 80036e8:	667a      	str	r2, [r7, #100]	; 0x64
 80036ea:	f04f 0200 	mov.w	r2, #0
 80036ee:	f04f 0300 	mov.w	r3, #0
 80036f2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80036f6:	4649      	mov	r1, r9
 80036f8:	008b      	lsls	r3, r1, #2
 80036fa:	4641      	mov	r1, r8
 80036fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003700:	4641      	mov	r1, r8
 8003702:	008a      	lsls	r2, r1, #2
 8003704:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003708:	f7fd f9b8 	bl	8000a7c <__aeabi_uldivmod>
 800370c:	4602      	mov	r2, r0
 800370e:	460b      	mov	r3, r1
 8003710:	4b0d      	ldr	r3, [pc, #52]	; (8003748 <UART_SetConfig+0x4e4>)
 8003712:	fba3 1302 	umull	r1, r3, r3, r2
 8003716:	095b      	lsrs	r3, r3, #5
 8003718:	2164      	movs	r1, #100	; 0x64
 800371a:	fb01 f303 	mul.w	r3, r1, r3
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	011b      	lsls	r3, r3, #4
 8003722:	3332      	adds	r3, #50	; 0x32
 8003724:	4a08      	ldr	r2, [pc, #32]	; (8003748 <UART_SetConfig+0x4e4>)
 8003726:	fba2 2303 	umull	r2, r3, r2, r3
 800372a:	095b      	lsrs	r3, r3, #5
 800372c:	f003 020f 	and.w	r2, r3, #15
 8003730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4422      	add	r2, r4
 8003738:	609a      	str	r2, [r3, #8]
}
 800373a:	bf00      	nop
 800373c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003740:	46bd      	mov	sp, r7
 8003742:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003746:	bf00      	nop
 8003748:	51eb851f 	.word	0x51eb851f

0800374c <__errno>:
 800374c:	4b01      	ldr	r3, [pc, #4]	; (8003754 <__errno+0x8>)
 800374e:	6818      	ldr	r0, [r3, #0]
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	2000000c 	.word	0x2000000c

08003758 <__libc_init_array>:
 8003758:	b570      	push	{r4, r5, r6, lr}
 800375a:	4d0d      	ldr	r5, [pc, #52]	; (8003790 <__libc_init_array+0x38>)
 800375c:	4c0d      	ldr	r4, [pc, #52]	; (8003794 <__libc_init_array+0x3c>)
 800375e:	1b64      	subs	r4, r4, r5
 8003760:	10a4      	asrs	r4, r4, #2
 8003762:	2600      	movs	r6, #0
 8003764:	42a6      	cmp	r6, r4
 8003766:	d109      	bne.n	800377c <__libc_init_array+0x24>
 8003768:	4d0b      	ldr	r5, [pc, #44]	; (8003798 <__libc_init_array+0x40>)
 800376a:	4c0c      	ldr	r4, [pc, #48]	; (800379c <__libc_init_array+0x44>)
 800376c:	f000 fe2a 	bl	80043c4 <_init>
 8003770:	1b64      	subs	r4, r4, r5
 8003772:	10a4      	asrs	r4, r4, #2
 8003774:	2600      	movs	r6, #0
 8003776:	42a6      	cmp	r6, r4
 8003778:	d105      	bne.n	8003786 <__libc_init_array+0x2e>
 800377a:	bd70      	pop	{r4, r5, r6, pc}
 800377c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003780:	4798      	blx	r3
 8003782:	3601      	adds	r6, #1
 8003784:	e7ee      	b.n	8003764 <__libc_init_array+0xc>
 8003786:	f855 3b04 	ldr.w	r3, [r5], #4
 800378a:	4798      	blx	r3
 800378c:	3601      	adds	r6, #1
 800378e:	e7f2      	b.n	8003776 <__libc_init_array+0x1e>
 8003790:	08004448 	.word	0x08004448
 8003794:	08004448 	.word	0x08004448
 8003798:	08004448 	.word	0x08004448
 800379c:	0800444c 	.word	0x0800444c

080037a0 <memcpy>:
 80037a0:	440a      	add	r2, r1
 80037a2:	4291      	cmp	r1, r2
 80037a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80037a8:	d100      	bne.n	80037ac <memcpy+0xc>
 80037aa:	4770      	bx	lr
 80037ac:	b510      	push	{r4, lr}
 80037ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037b6:	4291      	cmp	r1, r2
 80037b8:	d1f9      	bne.n	80037ae <memcpy+0xe>
 80037ba:	bd10      	pop	{r4, pc}

080037bc <memset>:
 80037bc:	4402      	add	r2, r0
 80037be:	4603      	mov	r3, r0
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d100      	bne.n	80037c6 <memset+0xa>
 80037c4:	4770      	bx	lr
 80037c6:	f803 1b01 	strb.w	r1, [r3], #1
 80037ca:	e7f9      	b.n	80037c0 <memset+0x4>

080037cc <swapfunc>:
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	b510      	push	{r4, lr}
 80037d0:	d00a      	beq.n	80037e8 <swapfunc+0x1c>
 80037d2:	0892      	lsrs	r2, r2, #2
 80037d4:	3a01      	subs	r2, #1
 80037d6:	6803      	ldr	r3, [r0, #0]
 80037d8:	680c      	ldr	r4, [r1, #0]
 80037da:	f840 4b04 	str.w	r4, [r0], #4
 80037de:	2a00      	cmp	r2, #0
 80037e0:	f841 3b04 	str.w	r3, [r1], #4
 80037e4:	dcf6      	bgt.n	80037d4 <swapfunc+0x8>
 80037e6:	bd10      	pop	{r4, pc}
 80037e8:	4402      	add	r2, r0
 80037ea:	780c      	ldrb	r4, [r1, #0]
 80037ec:	7803      	ldrb	r3, [r0, #0]
 80037ee:	f800 4b01 	strb.w	r4, [r0], #1
 80037f2:	f801 3b01 	strb.w	r3, [r1], #1
 80037f6:	1a13      	subs	r3, r2, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	dcf6      	bgt.n	80037ea <swapfunc+0x1e>
 80037fc:	e7f3      	b.n	80037e6 <swapfunc+0x1a>

080037fe <med3.constprop.0>:
 80037fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003800:	460c      	mov	r4, r1
 8003802:	4615      	mov	r5, r2
 8003804:	4607      	mov	r7, r0
 8003806:	461e      	mov	r6, r3
 8003808:	4798      	blx	r3
 800380a:	2800      	cmp	r0, #0
 800380c:	4629      	mov	r1, r5
 800380e:	4620      	mov	r0, r4
 8003810:	da0a      	bge.n	8003828 <med3.constprop.0+0x2a>
 8003812:	47b0      	blx	r6
 8003814:	2800      	cmp	r0, #0
 8003816:	db05      	blt.n	8003824 <med3.constprop.0+0x26>
 8003818:	4629      	mov	r1, r5
 800381a:	4638      	mov	r0, r7
 800381c:	47b0      	blx	r6
 800381e:	2800      	cmp	r0, #0
 8003820:	db0a      	blt.n	8003838 <med3.constprop.0+0x3a>
 8003822:	463c      	mov	r4, r7
 8003824:	4620      	mov	r0, r4
 8003826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003828:	47b0      	blx	r6
 800382a:	2800      	cmp	r0, #0
 800382c:	dcfa      	bgt.n	8003824 <med3.constprop.0+0x26>
 800382e:	4629      	mov	r1, r5
 8003830:	4638      	mov	r0, r7
 8003832:	47b0      	blx	r6
 8003834:	2800      	cmp	r0, #0
 8003836:	dbf4      	blt.n	8003822 <med3.constprop.0+0x24>
 8003838:	462c      	mov	r4, r5
 800383a:	e7f3      	b.n	8003824 <med3.constprop.0+0x26>

0800383c <qsort>:
 800383c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003840:	469a      	mov	sl, r3
 8003842:	ea40 0302 	orr.w	r3, r0, r2
 8003846:	079b      	lsls	r3, r3, #30
 8003848:	b097      	sub	sp, #92	; 0x5c
 800384a:	4606      	mov	r6, r0
 800384c:	4614      	mov	r4, r2
 800384e:	d11a      	bne.n	8003886 <qsort+0x4a>
 8003850:	f1b2 0804 	subs.w	r8, r2, #4
 8003854:	bf18      	it	ne
 8003856:	f04f 0801 	movne.w	r8, #1
 800385a:	2300      	movs	r3, #0
 800385c:	9302      	str	r3, [sp, #8]
 800385e:	1933      	adds	r3, r6, r4
 8003860:	fb04 f701 	mul.w	r7, r4, r1
 8003864:	9301      	str	r3, [sp, #4]
 8003866:	2906      	cmp	r1, #6
 8003868:	eb06 0307 	add.w	r3, r6, r7
 800386c:	9303      	str	r3, [sp, #12]
 800386e:	d82a      	bhi.n	80038c6 <qsort+0x8a>
 8003870:	9b01      	ldr	r3, [sp, #4]
 8003872:	9a03      	ldr	r2, [sp, #12]
 8003874:	4293      	cmp	r3, r2
 8003876:	d310      	bcc.n	800389a <qsort+0x5e>
 8003878:	9b02      	ldr	r3, [sp, #8]
 800387a:	2b00      	cmp	r3, #0
 800387c:	f040 811e 	bne.w	8003abc <qsort+0x280>
 8003880:	b017      	add	sp, #92	; 0x5c
 8003882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003886:	f04f 0802 	mov.w	r8, #2
 800388a:	e7e6      	b.n	800385a <qsort+0x1e>
 800388c:	4643      	mov	r3, r8
 800388e:	4622      	mov	r2, r4
 8003890:	4639      	mov	r1, r7
 8003892:	4628      	mov	r0, r5
 8003894:	f7ff ff9a 	bl	80037cc <swapfunc>
 8003898:	e00e      	b.n	80038b8 <qsort+0x7c>
 800389a:	9d01      	ldr	r5, [sp, #4]
 800389c:	e00d      	b.n	80038ba <qsort+0x7e>
 800389e:	1b2f      	subs	r7, r5, r4
 80038a0:	4629      	mov	r1, r5
 80038a2:	4638      	mov	r0, r7
 80038a4:	47d0      	blx	sl
 80038a6:	2800      	cmp	r0, #0
 80038a8:	dd09      	ble.n	80038be <qsort+0x82>
 80038aa:	f1b8 0f00 	cmp.w	r8, #0
 80038ae:	d1ed      	bne.n	800388c <qsort+0x50>
 80038b0:	682b      	ldr	r3, [r5, #0]
 80038b2:	683a      	ldr	r2, [r7, #0]
 80038b4:	602a      	str	r2, [r5, #0]
 80038b6:	603b      	str	r3, [r7, #0]
 80038b8:	463d      	mov	r5, r7
 80038ba:	42ae      	cmp	r6, r5
 80038bc:	d3ef      	bcc.n	800389e <qsort+0x62>
 80038be:	9b01      	ldr	r3, [sp, #4]
 80038c0:	4423      	add	r3, r4
 80038c2:	9301      	str	r3, [sp, #4]
 80038c4:	e7d4      	b.n	8003870 <qsort+0x34>
 80038c6:	ea4f 0951 	mov.w	r9, r1, lsr #1
 80038ca:	1b3f      	subs	r7, r7, r4
 80038cc:	2907      	cmp	r1, #7
 80038ce:	fb04 6909 	mla	r9, r4, r9, r6
 80038d2:	4437      	add	r7, r6
 80038d4:	d022      	beq.n	800391c <qsort+0xe0>
 80038d6:	2928      	cmp	r1, #40	; 0x28
 80038d8:	d945      	bls.n	8003966 <qsort+0x12a>
 80038da:	08c9      	lsrs	r1, r1, #3
 80038dc:	fb04 f501 	mul.w	r5, r4, r1
 80038e0:	4653      	mov	r3, sl
 80038e2:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 80038e6:	1971      	adds	r1, r6, r5
 80038e8:	4630      	mov	r0, r6
 80038ea:	f7ff ff88 	bl	80037fe <med3.constprop.0>
 80038ee:	4649      	mov	r1, r9
 80038f0:	eb09 0205 	add.w	r2, r9, r5
 80038f4:	4653      	mov	r3, sl
 80038f6:	4683      	mov	fp, r0
 80038f8:	1b48      	subs	r0, r1, r5
 80038fa:	f7ff ff80 	bl	80037fe <med3.constprop.0>
 80038fe:	463a      	mov	r2, r7
 8003900:	4681      	mov	r9, r0
 8003902:	4653      	mov	r3, sl
 8003904:	1b79      	subs	r1, r7, r5
 8003906:	eba7 0045 	sub.w	r0, r7, r5, lsl #1
 800390a:	f7ff ff78 	bl	80037fe <med3.constprop.0>
 800390e:	4602      	mov	r2, r0
 8003910:	4649      	mov	r1, r9
 8003912:	4653      	mov	r3, sl
 8003914:	4658      	mov	r0, fp
 8003916:	f7ff ff72 	bl	80037fe <med3.constprop.0>
 800391a:	4681      	mov	r9, r0
 800391c:	f1b8 0f00 	cmp.w	r8, #0
 8003920:	d124      	bne.n	800396c <qsort+0x130>
 8003922:	6833      	ldr	r3, [r6, #0]
 8003924:	f8d9 2000 	ldr.w	r2, [r9]
 8003928:	6032      	str	r2, [r6, #0]
 800392a:	f8c9 3000 	str.w	r3, [r9]
 800392e:	eb06 0b04 	add.w	fp, r6, r4
 8003932:	46b9      	mov	r9, r7
 8003934:	465d      	mov	r5, fp
 8003936:	2300      	movs	r3, #0
 8003938:	45bb      	cmp	fp, r7
 800393a:	d835      	bhi.n	80039a8 <qsort+0x16c>
 800393c:	4631      	mov	r1, r6
 800393e:	4658      	mov	r0, fp
 8003940:	9304      	str	r3, [sp, #16]
 8003942:	47d0      	blx	sl
 8003944:	2800      	cmp	r0, #0
 8003946:	9b04      	ldr	r3, [sp, #16]
 8003948:	dc3e      	bgt.n	80039c8 <qsort+0x18c>
 800394a:	d10a      	bne.n	8003962 <qsort+0x126>
 800394c:	f1b8 0f00 	cmp.w	r8, #0
 8003950:	d113      	bne.n	800397a <qsort+0x13e>
 8003952:	682b      	ldr	r3, [r5, #0]
 8003954:	f8db 2000 	ldr.w	r2, [fp]
 8003958:	602a      	str	r2, [r5, #0]
 800395a:	f8cb 3000 	str.w	r3, [fp]
 800395e:	4425      	add	r5, r4
 8003960:	2301      	movs	r3, #1
 8003962:	44a3      	add	fp, r4
 8003964:	e7e8      	b.n	8003938 <qsort+0xfc>
 8003966:	463a      	mov	r2, r7
 8003968:	46b3      	mov	fp, r6
 800396a:	e7d1      	b.n	8003910 <qsort+0xd4>
 800396c:	4643      	mov	r3, r8
 800396e:	4622      	mov	r2, r4
 8003970:	4649      	mov	r1, r9
 8003972:	4630      	mov	r0, r6
 8003974:	f7ff ff2a 	bl	80037cc <swapfunc>
 8003978:	e7d9      	b.n	800392e <qsort+0xf2>
 800397a:	4643      	mov	r3, r8
 800397c:	4622      	mov	r2, r4
 800397e:	4659      	mov	r1, fp
 8003980:	4628      	mov	r0, r5
 8003982:	f7ff ff23 	bl	80037cc <swapfunc>
 8003986:	e7ea      	b.n	800395e <qsort+0x122>
 8003988:	d10b      	bne.n	80039a2 <qsort+0x166>
 800398a:	f1b8 0f00 	cmp.w	r8, #0
 800398e:	d114      	bne.n	80039ba <qsort+0x17e>
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	f8d9 2000 	ldr.w	r2, [r9]
 8003996:	603a      	str	r2, [r7, #0]
 8003998:	f8c9 3000 	str.w	r3, [r9]
 800399c:	eba9 0904 	sub.w	r9, r9, r4
 80039a0:	2301      	movs	r3, #1
 80039a2:	9f04      	ldr	r7, [sp, #16]
 80039a4:	45bb      	cmp	fp, r7
 80039a6:	d90f      	bls.n	80039c8 <qsort+0x18c>
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d143      	bne.n	8003a34 <qsort+0x1f8>
 80039ac:	9b01      	ldr	r3, [sp, #4]
 80039ae:	9a03      	ldr	r2, [sp, #12]
 80039b0:	4293      	cmp	r3, r2
 80039b2:	f4bf af61 	bcs.w	8003878 <qsort+0x3c>
 80039b6:	9d01      	ldr	r5, [sp, #4]
 80039b8:	e036      	b.n	8003a28 <qsort+0x1ec>
 80039ba:	4643      	mov	r3, r8
 80039bc:	4622      	mov	r2, r4
 80039be:	4649      	mov	r1, r9
 80039c0:	4638      	mov	r0, r7
 80039c2:	f7ff ff03 	bl	80037cc <swapfunc>
 80039c6:	e7e9      	b.n	800399c <qsort+0x160>
 80039c8:	4631      	mov	r1, r6
 80039ca:	4638      	mov	r0, r7
 80039cc:	9305      	str	r3, [sp, #20]
 80039ce:	47d0      	blx	sl
 80039d0:	1b3b      	subs	r3, r7, r4
 80039d2:	2800      	cmp	r0, #0
 80039d4:	9304      	str	r3, [sp, #16]
 80039d6:	9b05      	ldr	r3, [sp, #20]
 80039d8:	dad6      	bge.n	8003988 <qsort+0x14c>
 80039da:	f1b8 0f00 	cmp.w	r8, #0
 80039de:	d006      	beq.n	80039ee <qsort+0x1b2>
 80039e0:	4643      	mov	r3, r8
 80039e2:	4622      	mov	r2, r4
 80039e4:	4639      	mov	r1, r7
 80039e6:	4658      	mov	r0, fp
 80039e8:	f7ff fef0 	bl	80037cc <swapfunc>
 80039ec:	e005      	b.n	80039fa <qsort+0x1be>
 80039ee:	f8db 3000 	ldr.w	r3, [fp]
 80039f2:	683a      	ldr	r2, [r7, #0]
 80039f4:	f8cb 2000 	str.w	r2, [fp]
 80039f8:	603b      	str	r3, [r7, #0]
 80039fa:	9f04      	ldr	r7, [sp, #16]
 80039fc:	e7b0      	b.n	8003960 <qsort+0x124>
 80039fe:	4643      	mov	r3, r8
 8003a00:	4622      	mov	r2, r4
 8003a02:	4639      	mov	r1, r7
 8003a04:	4628      	mov	r0, r5
 8003a06:	f7ff fee1 	bl	80037cc <swapfunc>
 8003a0a:	e00c      	b.n	8003a26 <qsort+0x1ea>
 8003a0c:	1b2f      	subs	r7, r5, r4
 8003a0e:	4629      	mov	r1, r5
 8003a10:	4638      	mov	r0, r7
 8003a12:	47d0      	blx	sl
 8003a14:	2800      	cmp	r0, #0
 8003a16:	dd09      	ble.n	8003a2c <qsort+0x1f0>
 8003a18:	f1b8 0f00 	cmp.w	r8, #0
 8003a1c:	d1ef      	bne.n	80039fe <qsort+0x1c2>
 8003a1e:	682b      	ldr	r3, [r5, #0]
 8003a20:	683a      	ldr	r2, [r7, #0]
 8003a22:	602a      	str	r2, [r5, #0]
 8003a24:	603b      	str	r3, [r7, #0]
 8003a26:	463d      	mov	r5, r7
 8003a28:	42ae      	cmp	r6, r5
 8003a2a:	d3ef      	bcc.n	8003a0c <qsort+0x1d0>
 8003a2c:	9b01      	ldr	r3, [sp, #4]
 8003a2e:	4423      	add	r3, r4
 8003a30:	9301      	str	r3, [sp, #4]
 8003a32:	e7bb      	b.n	80039ac <qsort+0x170>
 8003a34:	ebab 0305 	sub.w	r3, fp, r5
 8003a38:	1baa      	subs	r2, r5, r6
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	bfa8      	it	ge
 8003a3e:	461a      	movge	r2, r3
 8003a40:	9301      	str	r3, [sp, #4]
 8003a42:	b12a      	cbz	r2, 8003a50 <qsort+0x214>
 8003a44:	4643      	mov	r3, r8
 8003a46:	ebab 0102 	sub.w	r1, fp, r2
 8003a4a:	4630      	mov	r0, r6
 8003a4c:	f7ff febe 	bl	80037cc <swapfunc>
 8003a50:	9b03      	ldr	r3, [sp, #12]
 8003a52:	eba3 0209 	sub.w	r2, r3, r9
 8003a56:	eba9 0707 	sub.w	r7, r9, r7
 8003a5a:	1b12      	subs	r2, r2, r4
 8003a5c:	42ba      	cmp	r2, r7
 8003a5e:	bf28      	it	cs
 8003a60:	463a      	movcs	r2, r7
 8003a62:	b12a      	cbz	r2, 8003a70 <qsort+0x234>
 8003a64:	9903      	ldr	r1, [sp, #12]
 8003a66:	4643      	mov	r3, r8
 8003a68:	1a89      	subs	r1, r1, r2
 8003a6a:	4658      	mov	r0, fp
 8003a6c:	f7ff feae 	bl	80037cc <swapfunc>
 8003a70:	9d01      	ldr	r5, [sp, #4]
 8003a72:	9b03      	ldr	r3, [sp, #12]
 8003a74:	42af      	cmp	r7, r5
 8003a76:	eba3 0007 	sub.w	r0, r3, r7
 8003a7a:	d904      	bls.n	8003a86 <qsort+0x24a>
 8003a7c:	4633      	mov	r3, r6
 8003a7e:	463d      	mov	r5, r7
 8003a80:	9f01      	ldr	r7, [sp, #4]
 8003a82:	4606      	mov	r6, r0
 8003a84:	4618      	mov	r0, r3
 8003a86:	42a7      	cmp	r7, r4
 8003a88:	d921      	bls.n	8003ace <qsort+0x292>
 8003a8a:	fbb7 f1f4 	udiv	r1, r7, r4
 8003a8e:	9b02      	ldr	r3, [sp, #8]
 8003a90:	2b07      	cmp	r3, #7
 8003a92:	d80d      	bhi.n	8003ab0 <qsort+0x274>
 8003a94:	fbb5 f5f4 	udiv	r5, r5, r4
 8003a98:	aa16      	add	r2, sp, #88	; 0x58
 8003a9a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003a9e:	f843 6c40 	str.w	r6, [r3, #-64]
 8003aa2:	f843 5c3c 	str.w	r5, [r3, #-60]
 8003aa6:	9b02      	ldr	r3, [sp, #8]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	9302      	str	r3, [sp, #8]
 8003aac:	4606      	mov	r6, r0
 8003aae:	e6d6      	b.n	800385e <qsort+0x22>
 8003ab0:	4653      	mov	r3, sl
 8003ab2:	4622      	mov	r2, r4
 8003ab4:	f7ff fec2 	bl	800383c <qsort>
 8003ab8:	42a5      	cmp	r5, r4
 8003aba:	d80b      	bhi.n	8003ad4 <qsort+0x298>
 8003abc:	9b02      	ldr	r3, [sp, #8]
 8003abe:	aa16      	add	r2, sp, #88	; 0x58
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	9302      	str	r3, [sp, #8]
 8003ac4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003ac8:	e953 0110 	ldrd	r0, r1, [r3, #-64]	; 0x40
 8003acc:	e7ee      	b.n	8003aac <qsort+0x270>
 8003ace:	42a5      	cmp	r5, r4
 8003ad0:	f67f aed2 	bls.w	8003878 <qsort+0x3c>
 8003ad4:	fbb5 f1f4 	udiv	r1, r5, r4
 8003ad8:	4630      	mov	r0, r6
 8003ada:	e7e7      	b.n	8003aac <qsort+0x270>

08003adc <sniprintf>:
 8003adc:	b40c      	push	{r2, r3}
 8003ade:	b530      	push	{r4, r5, lr}
 8003ae0:	4b17      	ldr	r3, [pc, #92]	; (8003b40 <sniprintf+0x64>)
 8003ae2:	1e0c      	subs	r4, r1, #0
 8003ae4:	681d      	ldr	r5, [r3, #0]
 8003ae6:	b09d      	sub	sp, #116	; 0x74
 8003ae8:	da08      	bge.n	8003afc <sniprintf+0x20>
 8003aea:	238b      	movs	r3, #139	; 0x8b
 8003aec:	602b      	str	r3, [r5, #0]
 8003aee:	f04f 30ff 	mov.w	r0, #4294967295
 8003af2:	b01d      	add	sp, #116	; 0x74
 8003af4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003af8:	b002      	add	sp, #8
 8003afa:	4770      	bx	lr
 8003afc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003b00:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003b04:	bf14      	ite	ne
 8003b06:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003b0a:	4623      	moveq	r3, r4
 8003b0c:	9304      	str	r3, [sp, #16]
 8003b0e:	9307      	str	r3, [sp, #28]
 8003b10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b14:	9002      	str	r0, [sp, #8]
 8003b16:	9006      	str	r0, [sp, #24]
 8003b18:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003b1c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003b1e:	ab21      	add	r3, sp, #132	; 0x84
 8003b20:	a902      	add	r1, sp, #8
 8003b22:	4628      	mov	r0, r5
 8003b24:	9301      	str	r3, [sp, #4]
 8003b26:	f000 f869 	bl	8003bfc <_svfiprintf_r>
 8003b2a:	1c43      	adds	r3, r0, #1
 8003b2c:	bfbc      	itt	lt
 8003b2e:	238b      	movlt	r3, #139	; 0x8b
 8003b30:	602b      	strlt	r3, [r5, #0]
 8003b32:	2c00      	cmp	r4, #0
 8003b34:	d0dd      	beq.n	8003af2 <sniprintf+0x16>
 8003b36:	9b02      	ldr	r3, [sp, #8]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	701a      	strb	r2, [r3, #0]
 8003b3c:	e7d9      	b.n	8003af2 <sniprintf+0x16>
 8003b3e:	bf00      	nop
 8003b40:	2000000c 	.word	0x2000000c

08003b44 <__ssputs_r>:
 8003b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b48:	688e      	ldr	r6, [r1, #8]
 8003b4a:	429e      	cmp	r6, r3
 8003b4c:	4682      	mov	sl, r0
 8003b4e:	460c      	mov	r4, r1
 8003b50:	4690      	mov	r8, r2
 8003b52:	461f      	mov	r7, r3
 8003b54:	d838      	bhi.n	8003bc8 <__ssputs_r+0x84>
 8003b56:	898a      	ldrh	r2, [r1, #12]
 8003b58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003b5c:	d032      	beq.n	8003bc4 <__ssputs_r+0x80>
 8003b5e:	6825      	ldr	r5, [r4, #0]
 8003b60:	6909      	ldr	r1, [r1, #16]
 8003b62:	eba5 0901 	sub.w	r9, r5, r1
 8003b66:	6965      	ldr	r5, [r4, #20]
 8003b68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003b6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003b70:	3301      	adds	r3, #1
 8003b72:	444b      	add	r3, r9
 8003b74:	106d      	asrs	r5, r5, #1
 8003b76:	429d      	cmp	r5, r3
 8003b78:	bf38      	it	cc
 8003b7a:	461d      	movcc	r5, r3
 8003b7c:	0553      	lsls	r3, r2, #21
 8003b7e:	d531      	bpl.n	8003be4 <__ssputs_r+0xa0>
 8003b80:	4629      	mov	r1, r5
 8003b82:	f000 fb55 	bl	8004230 <_malloc_r>
 8003b86:	4606      	mov	r6, r0
 8003b88:	b950      	cbnz	r0, 8003ba0 <__ssputs_r+0x5c>
 8003b8a:	230c      	movs	r3, #12
 8003b8c:	f8ca 3000 	str.w	r3, [sl]
 8003b90:	89a3      	ldrh	r3, [r4, #12]
 8003b92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b96:	81a3      	strh	r3, [r4, #12]
 8003b98:	f04f 30ff 	mov.w	r0, #4294967295
 8003b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ba0:	6921      	ldr	r1, [r4, #16]
 8003ba2:	464a      	mov	r2, r9
 8003ba4:	f7ff fdfc 	bl	80037a0 <memcpy>
 8003ba8:	89a3      	ldrh	r3, [r4, #12]
 8003baa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003bae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bb2:	81a3      	strh	r3, [r4, #12]
 8003bb4:	6126      	str	r6, [r4, #16]
 8003bb6:	6165      	str	r5, [r4, #20]
 8003bb8:	444e      	add	r6, r9
 8003bba:	eba5 0509 	sub.w	r5, r5, r9
 8003bbe:	6026      	str	r6, [r4, #0]
 8003bc0:	60a5      	str	r5, [r4, #8]
 8003bc2:	463e      	mov	r6, r7
 8003bc4:	42be      	cmp	r6, r7
 8003bc6:	d900      	bls.n	8003bca <__ssputs_r+0x86>
 8003bc8:	463e      	mov	r6, r7
 8003bca:	6820      	ldr	r0, [r4, #0]
 8003bcc:	4632      	mov	r2, r6
 8003bce:	4641      	mov	r1, r8
 8003bd0:	f000 faa8 	bl	8004124 <memmove>
 8003bd4:	68a3      	ldr	r3, [r4, #8]
 8003bd6:	1b9b      	subs	r3, r3, r6
 8003bd8:	60a3      	str	r3, [r4, #8]
 8003bda:	6823      	ldr	r3, [r4, #0]
 8003bdc:	4433      	add	r3, r6
 8003bde:	6023      	str	r3, [r4, #0]
 8003be0:	2000      	movs	r0, #0
 8003be2:	e7db      	b.n	8003b9c <__ssputs_r+0x58>
 8003be4:	462a      	mov	r2, r5
 8003be6:	f000 fb97 	bl	8004318 <_realloc_r>
 8003bea:	4606      	mov	r6, r0
 8003bec:	2800      	cmp	r0, #0
 8003bee:	d1e1      	bne.n	8003bb4 <__ssputs_r+0x70>
 8003bf0:	6921      	ldr	r1, [r4, #16]
 8003bf2:	4650      	mov	r0, sl
 8003bf4:	f000 fab0 	bl	8004158 <_free_r>
 8003bf8:	e7c7      	b.n	8003b8a <__ssputs_r+0x46>
	...

08003bfc <_svfiprintf_r>:
 8003bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c00:	4698      	mov	r8, r3
 8003c02:	898b      	ldrh	r3, [r1, #12]
 8003c04:	061b      	lsls	r3, r3, #24
 8003c06:	b09d      	sub	sp, #116	; 0x74
 8003c08:	4607      	mov	r7, r0
 8003c0a:	460d      	mov	r5, r1
 8003c0c:	4614      	mov	r4, r2
 8003c0e:	d50e      	bpl.n	8003c2e <_svfiprintf_r+0x32>
 8003c10:	690b      	ldr	r3, [r1, #16]
 8003c12:	b963      	cbnz	r3, 8003c2e <_svfiprintf_r+0x32>
 8003c14:	2140      	movs	r1, #64	; 0x40
 8003c16:	f000 fb0b 	bl	8004230 <_malloc_r>
 8003c1a:	6028      	str	r0, [r5, #0]
 8003c1c:	6128      	str	r0, [r5, #16]
 8003c1e:	b920      	cbnz	r0, 8003c2a <_svfiprintf_r+0x2e>
 8003c20:	230c      	movs	r3, #12
 8003c22:	603b      	str	r3, [r7, #0]
 8003c24:	f04f 30ff 	mov.w	r0, #4294967295
 8003c28:	e0d1      	b.n	8003dce <_svfiprintf_r+0x1d2>
 8003c2a:	2340      	movs	r3, #64	; 0x40
 8003c2c:	616b      	str	r3, [r5, #20]
 8003c2e:	2300      	movs	r3, #0
 8003c30:	9309      	str	r3, [sp, #36]	; 0x24
 8003c32:	2320      	movs	r3, #32
 8003c34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c38:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c3c:	2330      	movs	r3, #48	; 0x30
 8003c3e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003de8 <_svfiprintf_r+0x1ec>
 8003c42:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003c46:	f04f 0901 	mov.w	r9, #1
 8003c4a:	4623      	mov	r3, r4
 8003c4c:	469a      	mov	sl, r3
 8003c4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c52:	b10a      	cbz	r2, 8003c58 <_svfiprintf_r+0x5c>
 8003c54:	2a25      	cmp	r2, #37	; 0x25
 8003c56:	d1f9      	bne.n	8003c4c <_svfiprintf_r+0x50>
 8003c58:	ebba 0b04 	subs.w	fp, sl, r4
 8003c5c:	d00b      	beq.n	8003c76 <_svfiprintf_r+0x7a>
 8003c5e:	465b      	mov	r3, fp
 8003c60:	4622      	mov	r2, r4
 8003c62:	4629      	mov	r1, r5
 8003c64:	4638      	mov	r0, r7
 8003c66:	f7ff ff6d 	bl	8003b44 <__ssputs_r>
 8003c6a:	3001      	adds	r0, #1
 8003c6c:	f000 80aa 	beq.w	8003dc4 <_svfiprintf_r+0x1c8>
 8003c70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c72:	445a      	add	r2, fp
 8003c74:	9209      	str	r2, [sp, #36]	; 0x24
 8003c76:	f89a 3000 	ldrb.w	r3, [sl]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	f000 80a2 	beq.w	8003dc4 <_svfiprintf_r+0x1c8>
 8003c80:	2300      	movs	r3, #0
 8003c82:	f04f 32ff 	mov.w	r2, #4294967295
 8003c86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c8a:	f10a 0a01 	add.w	sl, sl, #1
 8003c8e:	9304      	str	r3, [sp, #16]
 8003c90:	9307      	str	r3, [sp, #28]
 8003c92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c96:	931a      	str	r3, [sp, #104]	; 0x68
 8003c98:	4654      	mov	r4, sl
 8003c9a:	2205      	movs	r2, #5
 8003c9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ca0:	4851      	ldr	r0, [pc, #324]	; (8003de8 <_svfiprintf_r+0x1ec>)
 8003ca2:	f7fc faa5 	bl	80001f0 <memchr>
 8003ca6:	9a04      	ldr	r2, [sp, #16]
 8003ca8:	b9d8      	cbnz	r0, 8003ce2 <_svfiprintf_r+0xe6>
 8003caa:	06d0      	lsls	r0, r2, #27
 8003cac:	bf44      	itt	mi
 8003cae:	2320      	movmi	r3, #32
 8003cb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003cb4:	0711      	lsls	r1, r2, #28
 8003cb6:	bf44      	itt	mi
 8003cb8:	232b      	movmi	r3, #43	; 0x2b
 8003cba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003cbe:	f89a 3000 	ldrb.w	r3, [sl]
 8003cc2:	2b2a      	cmp	r3, #42	; 0x2a
 8003cc4:	d015      	beq.n	8003cf2 <_svfiprintf_r+0xf6>
 8003cc6:	9a07      	ldr	r2, [sp, #28]
 8003cc8:	4654      	mov	r4, sl
 8003cca:	2000      	movs	r0, #0
 8003ccc:	f04f 0c0a 	mov.w	ip, #10
 8003cd0:	4621      	mov	r1, r4
 8003cd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003cd6:	3b30      	subs	r3, #48	; 0x30
 8003cd8:	2b09      	cmp	r3, #9
 8003cda:	d94e      	bls.n	8003d7a <_svfiprintf_r+0x17e>
 8003cdc:	b1b0      	cbz	r0, 8003d0c <_svfiprintf_r+0x110>
 8003cde:	9207      	str	r2, [sp, #28]
 8003ce0:	e014      	b.n	8003d0c <_svfiprintf_r+0x110>
 8003ce2:	eba0 0308 	sub.w	r3, r0, r8
 8003ce6:	fa09 f303 	lsl.w	r3, r9, r3
 8003cea:	4313      	orrs	r3, r2
 8003cec:	9304      	str	r3, [sp, #16]
 8003cee:	46a2      	mov	sl, r4
 8003cf0:	e7d2      	b.n	8003c98 <_svfiprintf_r+0x9c>
 8003cf2:	9b03      	ldr	r3, [sp, #12]
 8003cf4:	1d19      	adds	r1, r3, #4
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	9103      	str	r1, [sp, #12]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	bfbb      	ittet	lt
 8003cfe:	425b      	neglt	r3, r3
 8003d00:	f042 0202 	orrlt.w	r2, r2, #2
 8003d04:	9307      	strge	r3, [sp, #28]
 8003d06:	9307      	strlt	r3, [sp, #28]
 8003d08:	bfb8      	it	lt
 8003d0a:	9204      	strlt	r2, [sp, #16]
 8003d0c:	7823      	ldrb	r3, [r4, #0]
 8003d0e:	2b2e      	cmp	r3, #46	; 0x2e
 8003d10:	d10c      	bne.n	8003d2c <_svfiprintf_r+0x130>
 8003d12:	7863      	ldrb	r3, [r4, #1]
 8003d14:	2b2a      	cmp	r3, #42	; 0x2a
 8003d16:	d135      	bne.n	8003d84 <_svfiprintf_r+0x188>
 8003d18:	9b03      	ldr	r3, [sp, #12]
 8003d1a:	1d1a      	adds	r2, r3, #4
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	9203      	str	r2, [sp, #12]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	bfb8      	it	lt
 8003d24:	f04f 33ff 	movlt.w	r3, #4294967295
 8003d28:	3402      	adds	r4, #2
 8003d2a:	9305      	str	r3, [sp, #20]
 8003d2c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003df8 <_svfiprintf_r+0x1fc>
 8003d30:	7821      	ldrb	r1, [r4, #0]
 8003d32:	2203      	movs	r2, #3
 8003d34:	4650      	mov	r0, sl
 8003d36:	f7fc fa5b 	bl	80001f0 <memchr>
 8003d3a:	b140      	cbz	r0, 8003d4e <_svfiprintf_r+0x152>
 8003d3c:	2340      	movs	r3, #64	; 0x40
 8003d3e:	eba0 000a 	sub.w	r0, r0, sl
 8003d42:	fa03 f000 	lsl.w	r0, r3, r0
 8003d46:	9b04      	ldr	r3, [sp, #16]
 8003d48:	4303      	orrs	r3, r0
 8003d4a:	3401      	adds	r4, #1
 8003d4c:	9304      	str	r3, [sp, #16]
 8003d4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d52:	4826      	ldr	r0, [pc, #152]	; (8003dec <_svfiprintf_r+0x1f0>)
 8003d54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d58:	2206      	movs	r2, #6
 8003d5a:	f7fc fa49 	bl	80001f0 <memchr>
 8003d5e:	2800      	cmp	r0, #0
 8003d60:	d038      	beq.n	8003dd4 <_svfiprintf_r+0x1d8>
 8003d62:	4b23      	ldr	r3, [pc, #140]	; (8003df0 <_svfiprintf_r+0x1f4>)
 8003d64:	bb1b      	cbnz	r3, 8003dae <_svfiprintf_r+0x1b2>
 8003d66:	9b03      	ldr	r3, [sp, #12]
 8003d68:	3307      	adds	r3, #7
 8003d6a:	f023 0307 	bic.w	r3, r3, #7
 8003d6e:	3308      	adds	r3, #8
 8003d70:	9303      	str	r3, [sp, #12]
 8003d72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d74:	4433      	add	r3, r6
 8003d76:	9309      	str	r3, [sp, #36]	; 0x24
 8003d78:	e767      	b.n	8003c4a <_svfiprintf_r+0x4e>
 8003d7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d7e:	460c      	mov	r4, r1
 8003d80:	2001      	movs	r0, #1
 8003d82:	e7a5      	b.n	8003cd0 <_svfiprintf_r+0xd4>
 8003d84:	2300      	movs	r3, #0
 8003d86:	3401      	adds	r4, #1
 8003d88:	9305      	str	r3, [sp, #20]
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	f04f 0c0a 	mov.w	ip, #10
 8003d90:	4620      	mov	r0, r4
 8003d92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d96:	3a30      	subs	r2, #48	; 0x30
 8003d98:	2a09      	cmp	r2, #9
 8003d9a:	d903      	bls.n	8003da4 <_svfiprintf_r+0x1a8>
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d0c5      	beq.n	8003d2c <_svfiprintf_r+0x130>
 8003da0:	9105      	str	r1, [sp, #20]
 8003da2:	e7c3      	b.n	8003d2c <_svfiprintf_r+0x130>
 8003da4:	fb0c 2101 	mla	r1, ip, r1, r2
 8003da8:	4604      	mov	r4, r0
 8003daa:	2301      	movs	r3, #1
 8003dac:	e7f0      	b.n	8003d90 <_svfiprintf_r+0x194>
 8003dae:	ab03      	add	r3, sp, #12
 8003db0:	9300      	str	r3, [sp, #0]
 8003db2:	462a      	mov	r2, r5
 8003db4:	4b0f      	ldr	r3, [pc, #60]	; (8003df4 <_svfiprintf_r+0x1f8>)
 8003db6:	a904      	add	r1, sp, #16
 8003db8:	4638      	mov	r0, r7
 8003dba:	f3af 8000 	nop.w
 8003dbe:	1c42      	adds	r2, r0, #1
 8003dc0:	4606      	mov	r6, r0
 8003dc2:	d1d6      	bne.n	8003d72 <_svfiprintf_r+0x176>
 8003dc4:	89ab      	ldrh	r3, [r5, #12]
 8003dc6:	065b      	lsls	r3, r3, #25
 8003dc8:	f53f af2c 	bmi.w	8003c24 <_svfiprintf_r+0x28>
 8003dcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003dce:	b01d      	add	sp, #116	; 0x74
 8003dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dd4:	ab03      	add	r3, sp, #12
 8003dd6:	9300      	str	r3, [sp, #0]
 8003dd8:	462a      	mov	r2, r5
 8003dda:	4b06      	ldr	r3, [pc, #24]	; (8003df4 <_svfiprintf_r+0x1f8>)
 8003ddc:	a904      	add	r1, sp, #16
 8003dde:	4638      	mov	r0, r7
 8003de0:	f000 f87a 	bl	8003ed8 <_printf_i>
 8003de4:	e7eb      	b.n	8003dbe <_svfiprintf_r+0x1c2>
 8003de6:	bf00      	nop
 8003de8:	0800440c 	.word	0x0800440c
 8003dec:	08004416 	.word	0x08004416
 8003df0:	00000000 	.word	0x00000000
 8003df4:	08003b45 	.word	0x08003b45
 8003df8:	08004412 	.word	0x08004412

08003dfc <_printf_common>:
 8003dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e00:	4616      	mov	r6, r2
 8003e02:	4699      	mov	r9, r3
 8003e04:	688a      	ldr	r2, [r1, #8]
 8003e06:	690b      	ldr	r3, [r1, #16]
 8003e08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	bfb8      	it	lt
 8003e10:	4613      	movlt	r3, r2
 8003e12:	6033      	str	r3, [r6, #0]
 8003e14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e18:	4607      	mov	r7, r0
 8003e1a:	460c      	mov	r4, r1
 8003e1c:	b10a      	cbz	r2, 8003e22 <_printf_common+0x26>
 8003e1e:	3301      	adds	r3, #1
 8003e20:	6033      	str	r3, [r6, #0]
 8003e22:	6823      	ldr	r3, [r4, #0]
 8003e24:	0699      	lsls	r1, r3, #26
 8003e26:	bf42      	ittt	mi
 8003e28:	6833      	ldrmi	r3, [r6, #0]
 8003e2a:	3302      	addmi	r3, #2
 8003e2c:	6033      	strmi	r3, [r6, #0]
 8003e2e:	6825      	ldr	r5, [r4, #0]
 8003e30:	f015 0506 	ands.w	r5, r5, #6
 8003e34:	d106      	bne.n	8003e44 <_printf_common+0x48>
 8003e36:	f104 0a19 	add.w	sl, r4, #25
 8003e3a:	68e3      	ldr	r3, [r4, #12]
 8003e3c:	6832      	ldr	r2, [r6, #0]
 8003e3e:	1a9b      	subs	r3, r3, r2
 8003e40:	42ab      	cmp	r3, r5
 8003e42:	dc26      	bgt.n	8003e92 <_printf_common+0x96>
 8003e44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003e48:	1e13      	subs	r3, r2, #0
 8003e4a:	6822      	ldr	r2, [r4, #0]
 8003e4c:	bf18      	it	ne
 8003e4e:	2301      	movne	r3, #1
 8003e50:	0692      	lsls	r2, r2, #26
 8003e52:	d42b      	bmi.n	8003eac <_printf_common+0xb0>
 8003e54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e58:	4649      	mov	r1, r9
 8003e5a:	4638      	mov	r0, r7
 8003e5c:	47c0      	blx	r8
 8003e5e:	3001      	adds	r0, #1
 8003e60:	d01e      	beq.n	8003ea0 <_printf_common+0xa4>
 8003e62:	6823      	ldr	r3, [r4, #0]
 8003e64:	68e5      	ldr	r5, [r4, #12]
 8003e66:	6832      	ldr	r2, [r6, #0]
 8003e68:	f003 0306 	and.w	r3, r3, #6
 8003e6c:	2b04      	cmp	r3, #4
 8003e6e:	bf08      	it	eq
 8003e70:	1aad      	subeq	r5, r5, r2
 8003e72:	68a3      	ldr	r3, [r4, #8]
 8003e74:	6922      	ldr	r2, [r4, #16]
 8003e76:	bf0c      	ite	eq
 8003e78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e7c:	2500      	movne	r5, #0
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	bfc4      	itt	gt
 8003e82:	1a9b      	subgt	r3, r3, r2
 8003e84:	18ed      	addgt	r5, r5, r3
 8003e86:	2600      	movs	r6, #0
 8003e88:	341a      	adds	r4, #26
 8003e8a:	42b5      	cmp	r5, r6
 8003e8c:	d11a      	bne.n	8003ec4 <_printf_common+0xc8>
 8003e8e:	2000      	movs	r0, #0
 8003e90:	e008      	b.n	8003ea4 <_printf_common+0xa8>
 8003e92:	2301      	movs	r3, #1
 8003e94:	4652      	mov	r2, sl
 8003e96:	4649      	mov	r1, r9
 8003e98:	4638      	mov	r0, r7
 8003e9a:	47c0      	blx	r8
 8003e9c:	3001      	adds	r0, #1
 8003e9e:	d103      	bne.n	8003ea8 <_printf_common+0xac>
 8003ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ea8:	3501      	adds	r5, #1
 8003eaa:	e7c6      	b.n	8003e3a <_printf_common+0x3e>
 8003eac:	18e1      	adds	r1, r4, r3
 8003eae:	1c5a      	adds	r2, r3, #1
 8003eb0:	2030      	movs	r0, #48	; 0x30
 8003eb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003eb6:	4422      	add	r2, r4
 8003eb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ebc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ec0:	3302      	adds	r3, #2
 8003ec2:	e7c7      	b.n	8003e54 <_printf_common+0x58>
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	4622      	mov	r2, r4
 8003ec8:	4649      	mov	r1, r9
 8003eca:	4638      	mov	r0, r7
 8003ecc:	47c0      	blx	r8
 8003ece:	3001      	adds	r0, #1
 8003ed0:	d0e6      	beq.n	8003ea0 <_printf_common+0xa4>
 8003ed2:	3601      	adds	r6, #1
 8003ed4:	e7d9      	b.n	8003e8a <_printf_common+0x8e>
	...

08003ed8 <_printf_i>:
 8003ed8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003edc:	7e0f      	ldrb	r7, [r1, #24]
 8003ede:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003ee0:	2f78      	cmp	r7, #120	; 0x78
 8003ee2:	4691      	mov	r9, r2
 8003ee4:	4680      	mov	r8, r0
 8003ee6:	460c      	mov	r4, r1
 8003ee8:	469a      	mov	sl, r3
 8003eea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003eee:	d807      	bhi.n	8003f00 <_printf_i+0x28>
 8003ef0:	2f62      	cmp	r7, #98	; 0x62
 8003ef2:	d80a      	bhi.n	8003f0a <_printf_i+0x32>
 8003ef4:	2f00      	cmp	r7, #0
 8003ef6:	f000 80d8 	beq.w	80040aa <_printf_i+0x1d2>
 8003efa:	2f58      	cmp	r7, #88	; 0x58
 8003efc:	f000 80a3 	beq.w	8004046 <_printf_i+0x16e>
 8003f00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003f08:	e03a      	b.n	8003f80 <_printf_i+0xa8>
 8003f0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003f0e:	2b15      	cmp	r3, #21
 8003f10:	d8f6      	bhi.n	8003f00 <_printf_i+0x28>
 8003f12:	a101      	add	r1, pc, #4	; (adr r1, 8003f18 <_printf_i+0x40>)
 8003f14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f18:	08003f71 	.word	0x08003f71
 8003f1c:	08003f85 	.word	0x08003f85
 8003f20:	08003f01 	.word	0x08003f01
 8003f24:	08003f01 	.word	0x08003f01
 8003f28:	08003f01 	.word	0x08003f01
 8003f2c:	08003f01 	.word	0x08003f01
 8003f30:	08003f85 	.word	0x08003f85
 8003f34:	08003f01 	.word	0x08003f01
 8003f38:	08003f01 	.word	0x08003f01
 8003f3c:	08003f01 	.word	0x08003f01
 8003f40:	08003f01 	.word	0x08003f01
 8003f44:	08004091 	.word	0x08004091
 8003f48:	08003fb5 	.word	0x08003fb5
 8003f4c:	08004073 	.word	0x08004073
 8003f50:	08003f01 	.word	0x08003f01
 8003f54:	08003f01 	.word	0x08003f01
 8003f58:	080040b3 	.word	0x080040b3
 8003f5c:	08003f01 	.word	0x08003f01
 8003f60:	08003fb5 	.word	0x08003fb5
 8003f64:	08003f01 	.word	0x08003f01
 8003f68:	08003f01 	.word	0x08003f01
 8003f6c:	0800407b 	.word	0x0800407b
 8003f70:	682b      	ldr	r3, [r5, #0]
 8003f72:	1d1a      	adds	r2, r3, #4
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	602a      	str	r2, [r5, #0]
 8003f78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f80:	2301      	movs	r3, #1
 8003f82:	e0a3      	b.n	80040cc <_printf_i+0x1f4>
 8003f84:	6820      	ldr	r0, [r4, #0]
 8003f86:	6829      	ldr	r1, [r5, #0]
 8003f88:	0606      	lsls	r6, r0, #24
 8003f8a:	f101 0304 	add.w	r3, r1, #4
 8003f8e:	d50a      	bpl.n	8003fa6 <_printf_i+0xce>
 8003f90:	680e      	ldr	r6, [r1, #0]
 8003f92:	602b      	str	r3, [r5, #0]
 8003f94:	2e00      	cmp	r6, #0
 8003f96:	da03      	bge.n	8003fa0 <_printf_i+0xc8>
 8003f98:	232d      	movs	r3, #45	; 0x2d
 8003f9a:	4276      	negs	r6, r6
 8003f9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fa0:	485e      	ldr	r0, [pc, #376]	; (800411c <_printf_i+0x244>)
 8003fa2:	230a      	movs	r3, #10
 8003fa4:	e019      	b.n	8003fda <_printf_i+0x102>
 8003fa6:	680e      	ldr	r6, [r1, #0]
 8003fa8:	602b      	str	r3, [r5, #0]
 8003faa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003fae:	bf18      	it	ne
 8003fb0:	b236      	sxthne	r6, r6
 8003fb2:	e7ef      	b.n	8003f94 <_printf_i+0xbc>
 8003fb4:	682b      	ldr	r3, [r5, #0]
 8003fb6:	6820      	ldr	r0, [r4, #0]
 8003fb8:	1d19      	adds	r1, r3, #4
 8003fba:	6029      	str	r1, [r5, #0]
 8003fbc:	0601      	lsls	r1, r0, #24
 8003fbe:	d501      	bpl.n	8003fc4 <_printf_i+0xec>
 8003fc0:	681e      	ldr	r6, [r3, #0]
 8003fc2:	e002      	b.n	8003fca <_printf_i+0xf2>
 8003fc4:	0646      	lsls	r6, r0, #25
 8003fc6:	d5fb      	bpl.n	8003fc0 <_printf_i+0xe8>
 8003fc8:	881e      	ldrh	r6, [r3, #0]
 8003fca:	4854      	ldr	r0, [pc, #336]	; (800411c <_printf_i+0x244>)
 8003fcc:	2f6f      	cmp	r7, #111	; 0x6f
 8003fce:	bf0c      	ite	eq
 8003fd0:	2308      	moveq	r3, #8
 8003fd2:	230a      	movne	r3, #10
 8003fd4:	2100      	movs	r1, #0
 8003fd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003fda:	6865      	ldr	r5, [r4, #4]
 8003fdc:	60a5      	str	r5, [r4, #8]
 8003fde:	2d00      	cmp	r5, #0
 8003fe0:	bfa2      	ittt	ge
 8003fe2:	6821      	ldrge	r1, [r4, #0]
 8003fe4:	f021 0104 	bicge.w	r1, r1, #4
 8003fe8:	6021      	strge	r1, [r4, #0]
 8003fea:	b90e      	cbnz	r6, 8003ff0 <_printf_i+0x118>
 8003fec:	2d00      	cmp	r5, #0
 8003fee:	d04d      	beq.n	800408c <_printf_i+0x1b4>
 8003ff0:	4615      	mov	r5, r2
 8003ff2:	fbb6 f1f3 	udiv	r1, r6, r3
 8003ff6:	fb03 6711 	mls	r7, r3, r1, r6
 8003ffa:	5dc7      	ldrb	r7, [r0, r7]
 8003ffc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004000:	4637      	mov	r7, r6
 8004002:	42bb      	cmp	r3, r7
 8004004:	460e      	mov	r6, r1
 8004006:	d9f4      	bls.n	8003ff2 <_printf_i+0x11a>
 8004008:	2b08      	cmp	r3, #8
 800400a:	d10b      	bne.n	8004024 <_printf_i+0x14c>
 800400c:	6823      	ldr	r3, [r4, #0]
 800400e:	07de      	lsls	r6, r3, #31
 8004010:	d508      	bpl.n	8004024 <_printf_i+0x14c>
 8004012:	6923      	ldr	r3, [r4, #16]
 8004014:	6861      	ldr	r1, [r4, #4]
 8004016:	4299      	cmp	r1, r3
 8004018:	bfde      	ittt	le
 800401a:	2330      	movle	r3, #48	; 0x30
 800401c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004020:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004024:	1b52      	subs	r2, r2, r5
 8004026:	6122      	str	r2, [r4, #16]
 8004028:	f8cd a000 	str.w	sl, [sp]
 800402c:	464b      	mov	r3, r9
 800402e:	aa03      	add	r2, sp, #12
 8004030:	4621      	mov	r1, r4
 8004032:	4640      	mov	r0, r8
 8004034:	f7ff fee2 	bl	8003dfc <_printf_common>
 8004038:	3001      	adds	r0, #1
 800403a:	d14c      	bne.n	80040d6 <_printf_i+0x1fe>
 800403c:	f04f 30ff 	mov.w	r0, #4294967295
 8004040:	b004      	add	sp, #16
 8004042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004046:	4835      	ldr	r0, [pc, #212]	; (800411c <_printf_i+0x244>)
 8004048:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800404c:	6829      	ldr	r1, [r5, #0]
 800404e:	6823      	ldr	r3, [r4, #0]
 8004050:	f851 6b04 	ldr.w	r6, [r1], #4
 8004054:	6029      	str	r1, [r5, #0]
 8004056:	061d      	lsls	r5, r3, #24
 8004058:	d514      	bpl.n	8004084 <_printf_i+0x1ac>
 800405a:	07df      	lsls	r7, r3, #31
 800405c:	bf44      	itt	mi
 800405e:	f043 0320 	orrmi.w	r3, r3, #32
 8004062:	6023      	strmi	r3, [r4, #0]
 8004064:	b91e      	cbnz	r6, 800406e <_printf_i+0x196>
 8004066:	6823      	ldr	r3, [r4, #0]
 8004068:	f023 0320 	bic.w	r3, r3, #32
 800406c:	6023      	str	r3, [r4, #0]
 800406e:	2310      	movs	r3, #16
 8004070:	e7b0      	b.n	8003fd4 <_printf_i+0xfc>
 8004072:	6823      	ldr	r3, [r4, #0]
 8004074:	f043 0320 	orr.w	r3, r3, #32
 8004078:	6023      	str	r3, [r4, #0]
 800407a:	2378      	movs	r3, #120	; 0x78
 800407c:	4828      	ldr	r0, [pc, #160]	; (8004120 <_printf_i+0x248>)
 800407e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004082:	e7e3      	b.n	800404c <_printf_i+0x174>
 8004084:	0659      	lsls	r1, r3, #25
 8004086:	bf48      	it	mi
 8004088:	b2b6      	uxthmi	r6, r6
 800408a:	e7e6      	b.n	800405a <_printf_i+0x182>
 800408c:	4615      	mov	r5, r2
 800408e:	e7bb      	b.n	8004008 <_printf_i+0x130>
 8004090:	682b      	ldr	r3, [r5, #0]
 8004092:	6826      	ldr	r6, [r4, #0]
 8004094:	6961      	ldr	r1, [r4, #20]
 8004096:	1d18      	adds	r0, r3, #4
 8004098:	6028      	str	r0, [r5, #0]
 800409a:	0635      	lsls	r5, r6, #24
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	d501      	bpl.n	80040a4 <_printf_i+0x1cc>
 80040a0:	6019      	str	r1, [r3, #0]
 80040a2:	e002      	b.n	80040aa <_printf_i+0x1d2>
 80040a4:	0670      	lsls	r0, r6, #25
 80040a6:	d5fb      	bpl.n	80040a0 <_printf_i+0x1c8>
 80040a8:	8019      	strh	r1, [r3, #0]
 80040aa:	2300      	movs	r3, #0
 80040ac:	6123      	str	r3, [r4, #16]
 80040ae:	4615      	mov	r5, r2
 80040b0:	e7ba      	b.n	8004028 <_printf_i+0x150>
 80040b2:	682b      	ldr	r3, [r5, #0]
 80040b4:	1d1a      	adds	r2, r3, #4
 80040b6:	602a      	str	r2, [r5, #0]
 80040b8:	681d      	ldr	r5, [r3, #0]
 80040ba:	6862      	ldr	r2, [r4, #4]
 80040bc:	2100      	movs	r1, #0
 80040be:	4628      	mov	r0, r5
 80040c0:	f7fc f896 	bl	80001f0 <memchr>
 80040c4:	b108      	cbz	r0, 80040ca <_printf_i+0x1f2>
 80040c6:	1b40      	subs	r0, r0, r5
 80040c8:	6060      	str	r0, [r4, #4]
 80040ca:	6863      	ldr	r3, [r4, #4]
 80040cc:	6123      	str	r3, [r4, #16]
 80040ce:	2300      	movs	r3, #0
 80040d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040d4:	e7a8      	b.n	8004028 <_printf_i+0x150>
 80040d6:	6923      	ldr	r3, [r4, #16]
 80040d8:	462a      	mov	r2, r5
 80040da:	4649      	mov	r1, r9
 80040dc:	4640      	mov	r0, r8
 80040de:	47d0      	blx	sl
 80040e0:	3001      	adds	r0, #1
 80040e2:	d0ab      	beq.n	800403c <_printf_i+0x164>
 80040e4:	6823      	ldr	r3, [r4, #0]
 80040e6:	079b      	lsls	r3, r3, #30
 80040e8:	d413      	bmi.n	8004112 <_printf_i+0x23a>
 80040ea:	68e0      	ldr	r0, [r4, #12]
 80040ec:	9b03      	ldr	r3, [sp, #12]
 80040ee:	4298      	cmp	r0, r3
 80040f0:	bfb8      	it	lt
 80040f2:	4618      	movlt	r0, r3
 80040f4:	e7a4      	b.n	8004040 <_printf_i+0x168>
 80040f6:	2301      	movs	r3, #1
 80040f8:	4632      	mov	r2, r6
 80040fa:	4649      	mov	r1, r9
 80040fc:	4640      	mov	r0, r8
 80040fe:	47d0      	blx	sl
 8004100:	3001      	adds	r0, #1
 8004102:	d09b      	beq.n	800403c <_printf_i+0x164>
 8004104:	3501      	adds	r5, #1
 8004106:	68e3      	ldr	r3, [r4, #12]
 8004108:	9903      	ldr	r1, [sp, #12]
 800410a:	1a5b      	subs	r3, r3, r1
 800410c:	42ab      	cmp	r3, r5
 800410e:	dcf2      	bgt.n	80040f6 <_printf_i+0x21e>
 8004110:	e7eb      	b.n	80040ea <_printf_i+0x212>
 8004112:	2500      	movs	r5, #0
 8004114:	f104 0619 	add.w	r6, r4, #25
 8004118:	e7f5      	b.n	8004106 <_printf_i+0x22e>
 800411a:	bf00      	nop
 800411c:	0800441d 	.word	0x0800441d
 8004120:	0800442e 	.word	0x0800442e

08004124 <memmove>:
 8004124:	4288      	cmp	r0, r1
 8004126:	b510      	push	{r4, lr}
 8004128:	eb01 0402 	add.w	r4, r1, r2
 800412c:	d902      	bls.n	8004134 <memmove+0x10>
 800412e:	4284      	cmp	r4, r0
 8004130:	4623      	mov	r3, r4
 8004132:	d807      	bhi.n	8004144 <memmove+0x20>
 8004134:	1e43      	subs	r3, r0, #1
 8004136:	42a1      	cmp	r1, r4
 8004138:	d008      	beq.n	800414c <memmove+0x28>
 800413a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800413e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004142:	e7f8      	b.n	8004136 <memmove+0x12>
 8004144:	4402      	add	r2, r0
 8004146:	4601      	mov	r1, r0
 8004148:	428a      	cmp	r2, r1
 800414a:	d100      	bne.n	800414e <memmove+0x2a>
 800414c:	bd10      	pop	{r4, pc}
 800414e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004152:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004156:	e7f7      	b.n	8004148 <memmove+0x24>

08004158 <_free_r>:
 8004158:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800415a:	2900      	cmp	r1, #0
 800415c:	d044      	beq.n	80041e8 <_free_r+0x90>
 800415e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004162:	9001      	str	r0, [sp, #4]
 8004164:	2b00      	cmp	r3, #0
 8004166:	f1a1 0404 	sub.w	r4, r1, #4
 800416a:	bfb8      	it	lt
 800416c:	18e4      	addlt	r4, r4, r3
 800416e:	f000 f913 	bl	8004398 <__malloc_lock>
 8004172:	4a1e      	ldr	r2, [pc, #120]	; (80041ec <_free_r+0x94>)
 8004174:	9801      	ldr	r0, [sp, #4]
 8004176:	6813      	ldr	r3, [r2, #0]
 8004178:	b933      	cbnz	r3, 8004188 <_free_r+0x30>
 800417a:	6063      	str	r3, [r4, #4]
 800417c:	6014      	str	r4, [r2, #0]
 800417e:	b003      	add	sp, #12
 8004180:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004184:	f000 b90e 	b.w	80043a4 <__malloc_unlock>
 8004188:	42a3      	cmp	r3, r4
 800418a:	d908      	bls.n	800419e <_free_r+0x46>
 800418c:	6825      	ldr	r5, [r4, #0]
 800418e:	1961      	adds	r1, r4, r5
 8004190:	428b      	cmp	r3, r1
 8004192:	bf01      	itttt	eq
 8004194:	6819      	ldreq	r1, [r3, #0]
 8004196:	685b      	ldreq	r3, [r3, #4]
 8004198:	1949      	addeq	r1, r1, r5
 800419a:	6021      	streq	r1, [r4, #0]
 800419c:	e7ed      	b.n	800417a <_free_r+0x22>
 800419e:	461a      	mov	r2, r3
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	b10b      	cbz	r3, 80041a8 <_free_r+0x50>
 80041a4:	42a3      	cmp	r3, r4
 80041a6:	d9fa      	bls.n	800419e <_free_r+0x46>
 80041a8:	6811      	ldr	r1, [r2, #0]
 80041aa:	1855      	adds	r5, r2, r1
 80041ac:	42a5      	cmp	r5, r4
 80041ae:	d10b      	bne.n	80041c8 <_free_r+0x70>
 80041b0:	6824      	ldr	r4, [r4, #0]
 80041b2:	4421      	add	r1, r4
 80041b4:	1854      	adds	r4, r2, r1
 80041b6:	42a3      	cmp	r3, r4
 80041b8:	6011      	str	r1, [r2, #0]
 80041ba:	d1e0      	bne.n	800417e <_free_r+0x26>
 80041bc:	681c      	ldr	r4, [r3, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	6053      	str	r3, [r2, #4]
 80041c2:	4421      	add	r1, r4
 80041c4:	6011      	str	r1, [r2, #0]
 80041c6:	e7da      	b.n	800417e <_free_r+0x26>
 80041c8:	d902      	bls.n	80041d0 <_free_r+0x78>
 80041ca:	230c      	movs	r3, #12
 80041cc:	6003      	str	r3, [r0, #0]
 80041ce:	e7d6      	b.n	800417e <_free_r+0x26>
 80041d0:	6825      	ldr	r5, [r4, #0]
 80041d2:	1961      	adds	r1, r4, r5
 80041d4:	428b      	cmp	r3, r1
 80041d6:	bf04      	itt	eq
 80041d8:	6819      	ldreq	r1, [r3, #0]
 80041da:	685b      	ldreq	r3, [r3, #4]
 80041dc:	6063      	str	r3, [r4, #4]
 80041de:	bf04      	itt	eq
 80041e0:	1949      	addeq	r1, r1, r5
 80041e2:	6021      	streq	r1, [r4, #0]
 80041e4:	6054      	str	r4, [r2, #4]
 80041e6:	e7ca      	b.n	800417e <_free_r+0x26>
 80041e8:	b003      	add	sp, #12
 80041ea:	bd30      	pop	{r4, r5, pc}
 80041ec:	200001d4 	.word	0x200001d4

080041f0 <sbrk_aligned>:
 80041f0:	b570      	push	{r4, r5, r6, lr}
 80041f2:	4e0e      	ldr	r6, [pc, #56]	; (800422c <sbrk_aligned+0x3c>)
 80041f4:	460c      	mov	r4, r1
 80041f6:	6831      	ldr	r1, [r6, #0]
 80041f8:	4605      	mov	r5, r0
 80041fa:	b911      	cbnz	r1, 8004202 <sbrk_aligned+0x12>
 80041fc:	f000 f8bc 	bl	8004378 <_sbrk_r>
 8004200:	6030      	str	r0, [r6, #0]
 8004202:	4621      	mov	r1, r4
 8004204:	4628      	mov	r0, r5
 8004206:	f000 f8b7 	bl	8004378 <_sbrk_r>
 800420a:	1c43      	adds	r3, r0, #1
 800420c:	d00a      	beq.n	8004224 <sbrk_aligned+0x34>
 800420e:	1cc4      	adds	r4, r0, #3
 8004210:	f024 0403 	bic.w	r4, r4, #3
 8004214:	42a0      	cmp	r0, r4
 8004216:	d007      	beq.n	8004228 <sbrk_aligned+0x38>
 8004218:	1a21      	subs	r1, r4, r0
 800421a:	4628      	mov	r0, r5
 800421c:	f000 f8ac 	bl	8004378 <_sbrk_r>
 8004220:	3001      	adds	r0, #1
 8004222:	d101      	bne.n	8004228 <sbrk_aligned+0x38>
 8004224:	f04f 34ff 	mov.w	r4, #4294967295
 8004228:	4620      	mov	r0, r4
 800422a:	bd70      	pop	{r4, r5, r6, pc}
 800422c:	200001d8 	.word	0x200001d8

08004230 <_malloc_r>:
 8004230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004234:	1ccd      	adds	r5, r1, #3
 8004236:	f025 0503 	bic.w	r5, r5, #3
 800423a:	3508      	adds	r5, #8
 800423c:	2d0c      	cmp	r5, #12
 800423e:	bf38      	it	cc
 8004240:	250c      	movcc	r5, #12
 8004242:	2d00      	cmp	r5, #0
 8004244:	4607      	mov	r7, r0
 8004246:	db01      	blt.n	800424c <_malloc_r+0x1c>
 8004248:	42a9      	cmp	r1, r5
 800424a:	d905      	bls.n	8004258 <_malloc_r+0x28>
 800424c:	230c      	movs	r3, #12
 800424e:	603b      	str	r3, [r7, #0]
 8004250:	2600      	movs	r6, #0
 8004252:	4630      	mov	r0, r6
 8004254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004258:	4e2e      	ldr	r6, [pc, #184]	; (8004314 <_malloc_r+0xe4>)
 800425a:	f000 f89d 	bl	8004398 <__malloc_lock>
 800425e:	6833      	ldr	r3, [r6, #0]
 8004260:	461c      	mov	r4, r3
 8004262:	bb34      	cbnz	r4, 80042b2 <_malloc_r+0x82>
 8004264:	4629      	mov	r1, r5
 8004266:	4638      	mov	r0, r7
 8004268:	f7ff ffc2 	bl	80041f0 <sbrk_aligned>
 800426c:	1c43      	adds	r3, r0, #1
 800426e:	4604      	mov	r4, r0
 8004270:	d14d      	bne.n	800430e <_malloc_r+0xde>
 8004272:	6834      	ldr	r4, [r6, #0]
 8004274:	4626      	mov	r6, r4
 8004276:	2e00      	cmp	r6, #0
 8004278:	d140      	bne.n	80042fc <_malloc_r+0xcc>
 800427a:	6823      	ldr	r3, [r4, #0]
 800427c:	4631      	mov	r1, r6
 800427e:	4638      	mov	r0, r7
 8004280:	eb04 0803 	add.w	r8, r4, r3
 8004284:	f000 f878 	bl	8004378 <_sbrk_r>
 8004288:	4580      	cmp	r8, r0
 800428a:	d13a      	bne.n	8004302 <_malloc_r+0xd2>
 800428c:	6821      	ldr	r1, [r4, #0]
 800428e:	3503      	adds	r5, #3
 8004290:	1a6d      	subs	r5, r5, r1
 8004292:	f025 0503 	bic.w	r5, r5, #3
 8004296:	3508      	adds	r5, #8
 8004298:	2d0c      	cmp	r5, #12
 800429a:	bf38      	it	cc
 800429c:	250c      	movcc	r5, #12
 800429e:	4629      	mov	r1, r5
 80042a0:	4638      	mov	r0, r7
 80042a2:	f7ff ffa5 	bl	80041f0 <sbrk_aligned>
 80042a6:	3001      	adds	r0, #1
 80042a8:	d02b      	beq.n	8004302 <_malloc_r+0xd2>
 80042aa:	6823      	ldr	r3, [r4, #0]
 80042ac:	442b      	add	r3, r5
 80042ae:	6023      	str	r3, [r4, #0]
 80042b0:	e00e      	b.n	80042d0 <_malloc_r+0xa0>
 80042b2:	6822      	ldr	r2, [r4, #0]
 80042b4:	1b52      	subs	r2, r2, r5
 80042b6:	d41e      	bmi.n	80042f6 <_malloc_r+0xc6>
 80042b8:	2a0b      	cmp	r2, #11
 80042ba:	d916      	bls.n	80042ea <_malloc_r+0xba>
 80042bc:	1961      	adds	r1, r4, r5
 80042be:	42a3      	cmp	r3, r4
 80042c0:	6025      	str	r5, [r4, #0]
 80042c2:	bf18      	it	ne
 80042c4:	6059      	strne	r1, [r3, #4]
 80042c6:	6863      	ldr	r3, [r4, #4]
 80042c8:	bf08      	it	eq
 80042ca:	6031      	streq	r1, [r6, #0]
 80042cc:	5162      	str	r2, [r4, r5]
 80042ce:	604b      	str	r3, [r1, #4]
 80042d0:	4638      	mov	r0, r7
 80042d2:	f104 060b 	add.w	r6, r4, #11
 80042d6:	f000 f865 	bl	80043a4 <__malloc_unlock>
 80042da:	f026 0607 	bic.w	r6, r6, #7
 80042de:	1d23      	adds	r3, r4, #4
 80042e0:	1af2      	subs	r2, r6, r3
 80042e2:	d0b6      	beq.n	8004252 <_malloc_r+0x22>
 80042e4:	1b9b      	subs	r3, r3, r6
 80042e6:	50a3      	str	r3, [r4, r2]
 80042e8:	e7b3      	b.n	8004252 <_malloc_r+0x22>
 80042ea:	6862      	ldr	r2, [r4, #4]
 80042ec:	42a3      	cmp	r3, r4
 80042ee:	bf0c      	ite	eq
 80042f0:	6032      	streq	r2, [r6, #0]
 80042f2:	605a      	strne	r2, [r3, #4]
 80042f4:	e7ec      	b.n	80042d0 <_malloc_r+0xa0>
 80042f6:	4623      	mov	r3, r4
 80042f8:	6864      	ldr	r4, [r4, #4]
 80042fa:	e7b2      	b.n	8004262 <_malloc_r+0x32>
 80042fc:	4634      	mov	r4, r6
 80042fe:	6876      	ldr	r6, [r6, #4]
 8004300:	e7b9      	b.n	8004276 <_malloc_r+0x46>
 8004302:	230c      	movs	r3, #12
 8004304:	603b      	str	r3, [r7, #0]
 8004306:	4638      	mov	r0, r7
 8004308:	f000 f84c 	bl	80043a4 <__malloc_unlock>
 800430c:	e7a1      	b.n	8004252 <_malloc_r+0x22>
 800430e:	6025      	str	r5, [r4, #0]
 8004310:	e7de      	b.n	80042d0 <_malloc_r+0xa0>
 8004312:	bf00      	nop
 8004314:	200001d4 	.word	0x200001d4

08004318 <_realloc_r>:
 8004318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800431c:	4680      	mov	r8, r0
 800431e:	4614      	mov	r4, r2
 8004320:	460e      	mov	r6, r1
 8004322:	b921      	cbnz	r1, 800432e <_realloc_r+0x16>
 8004324:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004328:	4611      	mov	r1, r2
 800432a:	f7ff bf81 	b.w	8004230 <_malloc_r>
 800432e:	b92a      	cbnz	r2, 800433c <_realloc_r+0x24>
 8004330:	f7ff ff12 	bl	8004158 <_free_r>
 8004334:	4625      	mov	r5, r4
 8004336:	4628      	mov	r0, r5
 8004338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800433c:	f000 f838 	bl	80043b0 <_malloc_usable_size_r>
 8004340:	4284      	cmp	r4, r0
 8004342:	4607      	mov	r7, r0
 8004344:	d802      	bhi.n	800434c <_realloc_r+0x34>
 8004346:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800434a:	d812      	bhi.n	8004372 <_realloc_r+0x5a>
 800434c:	4621      	mov	r1, r4
 800434e:	4640      	mov	r0, r8
 8004350:	f7ff ff6e 	bl	8004230 <_malloc_r>
 8004354:	4605      	mov	r5, r0
 8004356:	2800      	cmp	r0, #0
 8004358:	d0ed      	beq.n	8004336 <_realloc_r+0x1e>
 800435a:	42bc      	cmp	r4, r7
 800435c:	4622      	mov	r2, r4
 800435e:	4631      	mov	r1, r6
 8004360:	bf28      	it	cs
 8004362:	463a      	movcs	r2, r7
 8004364:	f7ff fa1c 	bl	80037a0 <memcpy>
 8004368:	4631      	mov	r1, r6
 800436a:	4640      	mov	r0, r8
 800436c:	f7ff fef4 	bl	8004158 <_free_r>
 8004370:	e7e1      	b.n	8004336 <_realloc_r+0x1e>
 8004372:	4635      	mov	r5, r6
 8004374:	e7df      	b.n	8004336 <_realloc_r+0x1e>
	...

08004378 <_sbrk_r>:
 8004378:	b538      	push	{r3, r4, r5, lr}
 800437a:	4d06      	ldr	r5, [pc, #24]	; (8004394 <_sbrk_r+0x1c>)
 800437c:	2300      	movs	r3, #0
 800437e:	4604      	mov	r4, r0
 8004380:	4608      	mov	r0, r1
 8004382:	602b      	str	r3, [r5, #0]
 8004384:	f7fd f992 	bl	80016ac <_sbrk>
 8004388:	1c43      	adds	r3, r0, #1
 800438a:	d102      	bne.n	8004392 <_sbrk_r+0x1a>
 800438c:	682b      	ldr	r3, [r5, #0]
 800438e:	b103      	cbz	r3, 8004392 <_sbrk_r+0x1a>
 8004390:	6023      	str	r3, [r4, #0]
 8004392:	bd38      	pop	{r3, r4, r5, pc}
 8004394:	200001dc 	.word	0x200001dc

08004398 <__malloc_lock>:
 8004398:	4801      	ldr	r0, [pc, #4]	; (80043a0 <__malloc_lock+0x8>)
 800439a:	f000 b811 	b.w	80043c0 <__retarget_lock_acquire_recursive>
 800439e:	bf00      	nop
 80043a0:	200001e0 	.word	0x200001e0

080043a4 <__malloc_unlock>:
 80043a4:	4801      	ldr	r0, [pc, #4]	; (80043ac <__malloc_unlock+0x8>)
 80043a6:	f000 b80c 	b.w	80043c2 <__retarget_lock_release_recursive>
 80043aa:	bf00      	nop
 80043ac:	200001e0 	.word	0x200001e0

080043b0 <_malloc_usable_size_r>:
 80043b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043b4:	1f18      	subs	r0, r3, #4
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	bfbc      	itt	lt
 80043ba:	580b      	ldrlt	r3, [r1, r0]
 80043bc:	18c0      	addlt	r0, r0, r3
 80043be:	4770      	bx	lr

080043c0 <__retarget_lock_acquire_recursive>:
 80043c0:	4770      	bx	lr

080043c2 <__retarget_lock_release_recursive>:
 80043c2:	4770      	bx	lr

080043c4 <_init>:
 80043c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043c6:	bf00      	nop
 80043c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ca:	bc08      	pop	{r3}
 80043cc:	469e      	mov	lr, r3
 80043ce:	4770      	bx	lr

080043d0 <_fini>:
 80043d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043d2:	bf00      	nop
 80043d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043d6:	bc08      	pop	{r3}
 80043d8:	469e      	mov	lr, r3
 80043da:	4770      	bx	lr
